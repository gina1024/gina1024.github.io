const lessonData = "{
  "project": null,
  "organization": {
    "id": "cmfsyhn96006ujr04sa053r2g",
    "name": "Georgina's 1"
  },
  "title": "Managing Bullying on the School Bus",
  "blocks": {
    "2127": {
      "type": "experienceTile",
      "data": {
        "root": {
          "type": "node",
          "id": "DNZ2"
        }
      }
    },
    "placeholder-id": {
      "type": "tiledLayout",
      "data": {},
      "layout": {
        "rows": [
          {
            "rowId": "row1",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "thlk",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "row2",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "ZM5J",
                "relativeWidth": 1
              }
            ]
          }
        ]
      },
      "sectionDivider": true
    },
    "FYtl": {
      "order": "a1",
      "parentId": "USAC",
      "type": "imageElement",
      "data": {
        "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2F1478b942-f26d-4140-b867-2ff0767dbdc2%2Fgenerated-image.jpg",
        "imageDescription": "Three students occupying a bus seat, with one student leaning across to block the empty space, preventing another student from sitting down.",
        "objectFit": "cover"
      }
    },
    "GcJk": {
      "type": "imageTile",
      "data": {
        "image": {
          "altText": "photorealistic image of a school bus driver calmly observing students in the rearview mirror, ready to intervene, in great lighting, one person.",
          "aspectRatio": 1,
          "imageId": "uploads/d0bf1e57-b34c-48d3-9df5-5b58a10b6d70/generated-image.jpg",
          "searchTerm": "photorealistic image of a school bus driver calmly observing students in the rearview mirror, ready to intervene, in great lighting, one person.",
          "sourceType": "Generated",
          "rightsType": "Unknown",
          "layout": "left-full",
          "source": "./assets/images/image-03cd6b43-259f-4ede-9ab8-05f254e0d339.png",
          "thumbnail": "https://storage.googleapis.com/mindsmith/uploads%2Fd0bf1e57-b34c-48d3-9df5-5b58a10b6d70%2Fgenerated-image.jpg"
        },
        "objectFit": "cover",
        "status": "Available"
      }
    },
    "JaQ3": {
      "type": "sceneNode",
      "data": {
        "background": {
          "aspectRatio": 1.498046875,
          "sourceType": "Upload",
          "rightsType": "Uploaded",
          "source": "./assets/images/scene-Scene 1.png"
        },
        "name": "Scene 1",
        "order": "a0"
      },
      "parentId": "2127"
    },
    "NZK9": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Real-World Example: The Case of Sarah"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "title"
      }
    },
    "-r_i": {
      "type": "tiledLayout",
      "data": {},
      "layout": {
        "rows": [
          {
            "rowId": "itme",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "NZK9",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "o7yQ",
            "relativeHeight": 1,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "Oxpw",
                "relativeWidth": 0.5
              },
              {
                "tileId": "087n",
                "relativeWidth": 0.5
              }
            ]
          },
          {
            "rowId": "2T7t",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "0iq5",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "9xOP",
            "relativeHeight": null,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "SqJf",
                "relativeWidth": 1
              }
            ]
          }
        ]
      },
      "sectionDivider": false
    },
    "5SZQ": {
      "type": "tiledLayout",
      "data": {},
      "layout": {
        "rows": [
          {
            "rowId": "tlJM",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "FN9r",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "geLm",
            "relativeHeight": 1,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "w0VJ",
                "relativeWidth": 0.5
              },
              {
                "tileId": "KK-o",
                "relativeWidth": 0.5
              }
            ]
          },
          {
            "rowId": "ifR_",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "HGAL",
                "relativeWidth": 1
              }
            ]
          }
        ]
      },
      "sectionDivider": false
    },
    "mS22": {
      "type": "textNode",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Observing without intervening can send a message that the behavior is acceptable or that you are unwilling to act. It's crucial to address bullying promptly."
                }
              ]
            }
          ]
        },
        "next": {
          "type": "node",
          "id": "Oyuf"
        },
        "characterPose": {
          "characterId": "sophia",
          "emotion": "disappointed",
          "type": "preset"
        },
        "scene": {
          "id": "-WTO"
        }
      },
      "position": {
        "x": 950,
        "y": -250
      },
      "parentId": "cQIB"
    },
    "ZWWq": {
      "order": "a0",
      "parentId": "3ZFB",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "Bullying can take many forms, often starting subtly and escalating. As a school bus driver, recognizing these behaviors is\ncrucial. Let's look at some common examples you might encounter on your route."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "Bullying can take many forms, often starting subtly and escalating. As a school bus driver, recognizing these behaviors is\ncrucial. Let's look at some common examples you might encounter on your route.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2F6c251b02-f397-4dfb-a12b-91968b580759%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 14420
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": null
        },
        "textColor": "#FFFFFF"
      }
    },
    "-zFM": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Example Reporting Form: Key Information and Submission"
                }
              ],
              "attrs": {
                "level": 3
              }
            },
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "An effective bullying incident report form ensures that all critical details are captured, enabling school administration to conduct a thorough investigation and take appropriate action. Understanding what information is required and who to submit it to, along with expected response times, is essential for every bus driver."
                }
              ]
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "52EM": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Managing Bullying on the school bus: A Practical for Drivers "
                }
              ],
              "attrs": {
                "level": 1
              }
            }
          ]
        },
        "justify": "center",
        "align": "center",
        "capWidth": null,
        "textAdornment": "title"
      }
    },
    "hQdl": {
      "type": "questionTile",
      "data": {
        "options": [
          {
            "id": "kWks",
            "text": "It mainly causes physical altercations that require immediate, one-time intervention from staff.",
            "correct": false,
            "feedback": "",
            "image": null
          },
          {
            "id": "89y8",
            "text": "It can contribute to chronic mental health issues, significant academic setbacks, and a sustained reluctance to attend school.",
            "correct": true,
            "feedback": "",
            "image": null
          },
          {
            "id": "5O4-",
            "text": "It primarily leads to minor disciplinary issues that are easily resolved by school administration.",
            "correct": false,
            "feedback": "",
            "image": null
          },
          {
            "id": "2Q6m",
            "text": "It often results in a temporary decrease in student morale, which quickly rebounds once the bullying stops.",
            "correct": false,
            "feedback": "",
            "image": null
          }
        ],
        "feedback": "",
        "feedbackWhenCorrect": "",
        "selectMultiple": false,
        "feedbackMode": "correct / incorrect",
        "finalFeedbackMode": "full",
        "question": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Considering the long-term well-being of students, which of the following is the most critical implication of unaddressed bullying on school buses?"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "graded": true,
        "contributingToScore": true
      }
    },
    "wXAM": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Before starting this journey through managing bullying on the school bus please take this pre-assessment quiz. This will help us understand what you already know before starting the course. Do not worry it is not graded. Take your time."
                }
              ]
            },
            {
              "type": "paragraph"
            }
          ]
        },
        "justify": "left",
        "align": "start",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "RAAu": {
      "type": "accordionTile",
      "data": {
        "items": [
          {
            "header": "The Bus Driver's Role in Addressing Bullying",
            "image": null,
            "imageAlign": "start",
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "As a school bus driver, you are often the first and last point of contact for students each day. This position grants you a unique vantage point to observe student interactions and identify potential bullying behaviors. Your role extends to "
                    },
                    {
                      "type": "text",
                      "text": "active supervision, timely intervention, and consistent reporting",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " of incidents. You are expected to maintain order, enforce school rules, and ensure that all students feel safe and respected during their commute."
                    }
                  ]
                }
              ]
            },
            "id": "5iyU"
          },
          {
            "header": "Legal Responsibilities",
            "image": null,
            "imageAlign": "start",
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Legally, school bus drivers operate under the "
                    },
                    {
                      "type": "text",
                      "text": "duty of care",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " principle, meaning you have a legal obligation to ensure the safety and well-being of the students in your charge. This includes protecting them from harm caused by other students. School districts typically have anti-bullying policies that mandate specific actions from staff, including bus drivers, when bullying is observed or reported. Failure to adhere to these policies can have serious consequences, both for the students involved and for the district."
                    }
                  ]
                }
              ]
            },
            "id": "Or1M"
          },
          {
            "header": "Ethical Responsibilities",
            "image": null,
            "imageAlign": "start",
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Ethically, your responsibility is to act as a "
                    },
                    {
                      "type": "text",
                      "text": "protector and advocate",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " for all students, particularly those who may be vulnerable. This involves creating an inclusive environment where every student feels valued and free from intimidation. Ignoring bullying, even subtle forms, can be perceived as condoning the behavior and can erode trust between students, parents, and the school system. Your ethical compass should guide you to prioritize student safety and dignity above all else."
                    }
                  ]
                }
              ]
            },
            "id": "edIm"
          }
        ],
        "align": "center"
      }
    },
    "Ev9t": {
      "order": "a8",
      "parentId": "u1xs",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "When bullying escalates or becomes undeniable, direct intervention is necessary. This requires safely stopping the bus and taking\na firm, calm stance to address the situation."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "When bullying escalates or becomes undeniable, direct intervention is necessary. This requires safely stopping the bus and taking\na firm, calm stance to address the situation.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2F7f599b27-088a-48ef-b00e-591ddd11b3fe%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 12382
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": {
            "type": "image",
            "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2Ff270fd68-18af-444c-8247-1ba22bb4b6ce%2Fgenerated-image.jpg",
            "opacity": 0.5
          }
        },
        "textColor": "#FFFFFF"
      }
    },
    "yspj": {
      "order": "a2",
      "parentId": "u1xs",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "What might start as playful teasing can quickly escalate into verbal bullying. Name-calling, taunts, and mocking words can deeply\naffect a student's self-esteem and sense of safety."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "What might start as playful teasing can quickly escalate into verbal bullying. Name-calling, taunts, and mocking words can deeply\naffect a student's self-esteem and sense of safety.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2F20072a19-b7b2-4aae-8586-fc795c236678%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 11076
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": {
            "type": "image",
            "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fd77d73e7-696e-4d30-b5b4-871b30c3e36d%2Fgenerated-image.jpg",
            "opacity": 0.5
          }
        },
        "textColor": "#FFFFFF"
      }
    },
    "4m2Z": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Key Takeaways from the Scenario"
                }
              ],
              "attrs": {
                "level": 3
              }
            },
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "This scenario highlights the essential steps a bus driver must take when confronted with bullying behavior. Your role is not merely to observe, but to act decisively and follow established protocols to ensure student safety and well-being."
                }
              ]
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "RaSJ": {
      "type": "dialogueNode",
      "data": {
        "scene": {
          "id": "C7rA"
        },
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "How confident do you feel now in your ability to identify bullying situations?"
                }
              ]
            }
          ]
        },
        "characterPose": {
          "type": "uploaded",
          "image": {
            "source": "assets/images/eric-asking.png",
            "altText": "eric asking",
            "rightsType": "Unknown",
            "sourceType": "Unknown",
            "aspectRatio": null
          },
          "layout": "default"
        },
        "options": [
          {
            "next": {
              "type": "node",
              "id": "9nDy"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "I still find it a bit tricky sometimes, especially with subtle cases."
                    }
                  ]
                }
              ]
            },
            "feedback": "It can be complex. Don't worry, continued awareness helps.",
            "id": "gTn8",
            "characterReaction": {
              "characterId": "sophia",
              "emotion": "neutral",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "node",
              "id": "zA4P"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "I feel much more confident and have a clearer understanding."
                    }
                  ]
                }
              ]
            },
            "feedback": "That's great to hear! Your practice has paid off.",
            "id": "EYJz",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "happy",
              "type": "preset"
            }
          }
        ],
        "randomizeOptions": true,
        "showMessageHistory": true,
        "showReactionWithoutFeedback": true
      },
      "position": {
        "x": 11400,
        "y": -250
      },
      "parentId": "2127"
    },
    "PnpB": {
      "type": "textNode",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Bullying is usually characterized by repetition, an intent to harm, and an imbalance of power. General conflict, while unpleasant, often lacks these consistent elements. Let's try the instructions again."
                }
              ]
            }
          ]
        },
        "next": {
          "type": "node",
          "id": "Qh08"
        },
        "characterPose": {
          "characterId": "eric",
          "emotion": "thinking",
          "type": "preset"
        },
        "scene": {
          "id": "C7rA"
        }
      },
      "position": {
        "x": 950,
        "y": -250
      },
      "parentId": "2127"
    },
    "HGAL": {
      "type": "sortingTile",
      "data": {
        "categories": [
          {
            "content": "Bullying Scenarios",
            "id": "n5ye",
            "items": [
              {
                "content": "A student teases another student once",
                "id": "xtQV"
              },
              {
                "content": "A student is excluded daily from a group",
                "id": "oYU0"
              },
              {
                "content": "Physical altercation between students",
                "id": "lYWK"
              }
            ]
          },
          {
            "content": "Not Bullying Scenarios",
            "id": "VTmo",
            "items": [
              {
                "content": "Accidental bump in the aisle",
                "id": "v494"
              },
              {
                "content": "A single instance of disagreement",
                "id": "SDAg"
              }
            ]
          }
        ]
      }
    },
    "ZCoQ": {
      "type": "tiledLayout",
      "data": {},
      "layout": {
        "rows": [
          {
            "rowId": "LuOZ",
            "relativeHeight": null,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "DMG3",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "R4FP",
            "relativeHeight": 1,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "Gvoc",
                "relativeWidth": 0.5
              },
              {
                "tileId": "peHT",
                "relativeWidth": 0.5
              }
            ]
          }
        ]
      },
      "sectionDivider": true
    },
    "PjMj": {
      "order": "a0",
      "parentId": "RxFM",
      "type": "imageElement",
      "data": {
        "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2F05ed4af2-affe-43fc-b40b-d85c6b2147a6%2Fgenerated-image.jpg",
        "imageDescription": "A close-up of a bus driver's eye in the rearview mirror, reflecting a worried expression.",
        "objectFit": "cover"
      }
    },
    "_c9G": {
      "type": "dialogueNode",
      "data": {
        "scene": {
          "id": "C7rA"
        },
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "You chose 'Bullying' for \"A student teases another student once about their new haircut.\" Given that it happened only once, does it still fit the definition of bullying?"
                }
              ]
            }
          ]
        },
        "characterPose": {
          "type": "uploaded",
          "image": {
            "source": "assets/images/eric-confused.png",
            "altText": "eric confused",
            "rightsType": "Unknown",
            "sourceType": "Unknown",
            "aspectRatio": null
          },
          "layout": "default"
        },
        "options": [
          {
            "next": {
              "type": "node",
              "id": "ggmX"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "You're right, it's 'Not Bullying' because it's not repeated."
                    }
                  ]
                }
              ]
            },
            "feedback": "Exactly. Repetition is a key factor.",
            "id": "eNMX",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "neutral",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "node",
              "id": "Qh08"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "I still think teasing is always bullying, even once."
                    }
                  ]
                }
              ]
            },
            "feedback": "While teasing is unkind, the \"once\" is crucial here. Let's go back and try again with that in mind.",
            "id": "4S3p",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "disappointed",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "complete",
              "result": "correct"
            },
            "text": "",
            "feedback": null,
            "id": "VAix",
            "characterReaction": null
          }
        ],
        "randomizeOptions": true,
        "showMessageHistory": true,
        "showReactionWithoutFeedback": true
      },
      "position": {
        "x": 2850,
        "y": -250
      },
      "parentId": "2127"
    },
    "jBP4": {
      "order": "a0",
      "parentId": "3H6a",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "\"Accidental\" Pushing"
                }
              ],
              "attrs": {
                "level": 3
              }
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Bumping in aisle"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Tripping"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "left"
      }
    },
    "2uGe": {
      "order": "a0",
      "parentId": "Ev9t",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Time to Intervene"
                }
              ],
              "attrs": {
                "level": 1
              }
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "center"
      }
    },
    "zk6J": {
      "order": "a5",
      "parentId": "u1xs",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "Bullying can also manifest physically, though it may not always involve direct hitting. Destroying property, tripping, or blocking\na student's path are all forms of physical aggression."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "Bullying can also manifest physically, though it may not always involve direct hitting. Destroying property, tripping, or blocking\na student's path are all forms of physical aggression.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2F24d850a5-1a39-4667-be15-16532ec644b1%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 12278
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": {
            "type": "image",
            "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2F00507597-0007-4285-9338-08ae967d422d%2Fgenerated-image.jpg",
            "opacity": 0.5
          }
        },
        "textColor": "#FFFFFF"
      }
    },
    "49MO": {
      "type": "listTile",
      "data": {
        "items": [
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Prompt Intervention:",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " Address bullying behaviors immediately and calmly to de-escalate the situation."
                    }
                  ]
                }
              ]
            },
            "id": "9p0l"
          },
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Direct Communication:",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " Clearly state that the behavior is unacceptable and enforce rules against name-calling and exclusion."
                    }
                  ]
                }
              ]
            },
            "id": "Wa6K"
          },
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Accountability:",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " Do not simply move the victim; address the aggressors' actions directly."
                    }
                  ]
                }
              ]
            },
            "id": "4aaT"
          },
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Reporting:",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " Always document and report incidents to school authorities, even if resolved on the bus, to ensure formal follow-up."
                    }
                  ]
                }
              ]
            },
            "id": "OVq5"
          }
        ],
        "columns": "1",
        "mode": "Bulleted"
      }
    },
    "DMG3": {
      "type": "sectionCalloutTile",
      "data": {
        "justify": "left",
        "align": "center"
      }
    },
    "-jjJ": {
      "type": "processTile",
      "data": {
        "elements": [
          {
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "heading",
                  "content": [
                    {
                      "type": "text",
                      "text": "Observe and Document"
                    }
                  ],
                  "attrs": {
                    "level": 3
                  }
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Upon witnessing or being informed of a bullying incident, immediately make mental notes or jot down key details as soon as it is safe and practical. Focus on who, what, when, where, and how the incident occurred. Include specific behaviors, direct quotes if possible, and any physical evidence or emotional impact observed."
                    }
                  ]
                }
              ]
            },
            "media": null,
            "id": "aMQ7",
            "justify": null
          },
          {
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "heading",
                  "content": [
                    {
                      "type": "text",
                      "text": "Ensure Immediate Safety"
                    }
                  ],
                  "attrs": {
                    "level": 3
                  }
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "If the incident is ongoing or poses an immediate threat, intervene safely and follow established protocols for de-escalation and separation of students. Your primary concern is the safety of all students on the bus. Once immediate safety is secured, proceed with documentation."
                    }
                  ]
                }
              ]
            },
            "media": null,
            "id": "HD3a",
            "justify": null
          },
          {
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "heading",
                  "content": [
                    {
                      "type": "text",
                      "text": "Complete the Official Report Form"
                    }
                  ],
                  "attrs": {
                    "level": 3
                  }
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Utilize your school district's designated bullying incident report form. This form is designed to capture all necessary information systematically. Be factual, objective, and comprehensive in your descriptions. Avoid speculation or personal opinions."
                    }
                  ]
                }
              ]
            },
            "media": null,
            "id": "Ddzj",
            "justify": null
          },
          {
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "heading",
                  "content": [
                    {
                      "type": "text",
                      "text": "Submit to Designated Authority"
                    }
                  ],
                  "attrs": {
                    "level": 3
                  }
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Submit the completed report to the specified school administrator or department, typically the principal, assistant principal, or transportation supervisor. Adhere to the designated submission timeline, which is often within 24-48 hours of the incident."
                    }
                  ]
                }
              ]
            },
            "media": null,
            "id": "fUj4",
            "justify": null
          },
          {
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "heading",
                  "content": [
                    {
                      "type": "text",
                      "text": "Follow-Up and Monitor"
                    }
                  ],
                  "attrs": {
                    "level": 3
                  }
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "After submission, it is good practice to follow up with the designated authority to ensure the report was received and that appropriate actions are being taken. Continue to monitor the students involved on your bus for any recurrence of behavior or lingering distress."
                    }
                  ]
                }
              ]
            },
            "media": null,
            "id": "Pf3V",
            "justify": null
          }
        ],
        "hasIntro": true,
        "hasOutro": true,
        "intro": {
          "content": {
            "type": "doc",
            "content": [
              {
                "type": "heading",
                "content": [
                  {
                    "type": "text",
                    "text": "Step-by-Step Guide: Reporting Bullying Incidents"
                  }
                ],
                "attrs": {
                  "level": 2
                }
              }
            ]
          },
          "media": null,
          "id": "4KHM",
          "justify": null
        },
        "outro": {
          "content": {
            "type": "doc",
            "content": [
              {
                "type": "heading",
                "content": [
                  {
                    "type": "text",
                    "text": "Why These Steps Matter"
                  }
                ],
                "attrs": {
                  "level": 2
                }
              },
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Each step in this process contributes to a robust system of accountability and support. By meticulously following these procedures, you empower the school administration to address bullying effectively, ensuring a safer environment for all students."
                  }
                ]
              }
            ]
          },
          "media": null,
          "id": "8z-b",
          "justify": null
        }
      },
      "elementColor": {
        "alias": "accent-1"
      }
    },
    "1T_1": {
      "type": "tiledLayout",
      "data": {},
      "layout": {
        "rows": [
          {
            "rowId": "ei8S",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "vOOg",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "svPS",
            "relativeHeight": 1,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "pZ45",
                "relativeWidth": 0.5
              },
              {
                "tileId": "4JFn",
                "relativeWidth": 0.5
              }
            ]
          },
          {
            "rowId": "exN9",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "I2lc",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "bRfv",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "w_Nt",
                "relativeWidth": 0.5
              }
            ]
          },
          {
            "rowId": "T4TA",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "hQdl",
                "relativeWidth": 0.5
              }
            ]
          }
        ]
      },
      "sectionDivider": false
    },
    "wrec": {
      "order": "a2",
      "parentId": "3ZFB",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "If unchecked, teasing can become more direct and public, involving name-calling or spreading rumors. This can make the target feel\nisolated and deeply embarrassed."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "If unchecked, teasing can become more direct and public, involving name-calling or spreading rumors. This can make the target feel\nisolated and deeply embarrassed.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2Ffd6692c0-5969-4ca5-805e-aae59a327404%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 10292
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": null
        },
        "textColor": "#FFFFFF"
      }
    },
    "fHj5": {
      "order": "a9",
      "parentId": "u1xs",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "The driver addresses the students involved, emphasizing the rules of respect and safety. Separating the students and speaking to\nthem individually can help de-escalate the tension."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "The driver addresses the students involved, emphasizing the rules of respect and safety. Separating the students and speaking to\nthem individually can help de-escalate the tension.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2F4d468acf-0afd-4270-bcf1-f45cdb58cda2%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 11546
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": {
            "type": "image",
            "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fab47679b-bd9b-4479-a74b-cfd0faf580bc%2Fgenerated-image.jpg",
            "opacity": 0.5
          }
        },
        "textColor": "#FFFFFF"
      }
    },
    "hNqr": {
      "order": "a0",
      "parentId": "yspj",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Verbal Taunts"
                }
              ],
              "attrs": {
                "level": 1
              }
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "center"
      }
    },
    "0tq2": {
      "type": "accordionTile",
      "data": {
        "items": [
          {
            "header": "Unwanted, Aggressive Behavior",
            "image": null,
            "imageAlign": "start",
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "This refers to actions that are intentionally harmful and are not desired by the victim. Aggression can manifest in various forms, from direct physical harm to subtle social manipulation. On a school bus, this could include a student intentionally tripping another, spreading rumors, or excluding someone from a group."
                    }
                  ]
                }
              ]
            },
            "id": "M3sv"
          },
          {
            "header": "Power Imbalance",
            "image": null,
            "imageAlign": "start",
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "A critical component of bullying is the existence of a real or perceived power imbalance. This imbalance can stem from physical strength, social status, popularity, or access to embarrassing information. The bully uses this power to control or harm the victim, who often struggles to defend themselves. For instance, an older, larger student might intimidate a younger, smaller student."
                    }
                  ]
                }
              ]
            },
            "id": "MTNr"
          },
          {
            "header": "Repetition",
            "image": null,
            "imageAlign": "start",
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Bullying is typically not a one-time incident. It involves repeated actions or the potential for repeated actions over time. This consistent pattern of aggression creates a climate of fear and distress for the victim. A single aggressive act might be a conflict, but if it becomes a pattern, it constitutes bullying."
                    }
                  ]
                }
              ]
            },
            "id": "m88K"
          }
        ],
        "align": "center"
      }
    },
    "rd2R": {
      "order": "a4",
      "parentId": "3ZFB",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "However, it can quickly escalate to deliberate pushing, shoving, or blocking pathways, designed to intimidate or cause discomfort\nand assert dominance."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "However, it can quickly escalate to deliberate pushing, shoving, or blocking pathways, designed to intimidate or cause discomfort\nand assert dominance.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fc76dde3c-1bcb-4da2-b94f-5d89058d87c0%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 9822
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": null
        },
        "textColor": "#FFFFFF"
      }
    },
    "FN9r": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Interactive Activity: Is it Bullying?"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "title"
      }
    },
    "bQ2N": {
      "type": "questionTile",
      "data": {
        "options": [
          {
            "id": "Hf0c",
            "text": "The driver should state that the incident was minor and required no specific actions beyond a verbal warning.",
            "correct": false,
            "feedback": "",
            "image": null
          },
          {
            "id": "M1d3",
            "text": "The driver should write a brief summary, focusing only on the outcome rather than the process of intervention.",
            "correct": false,
            "feedback": "",
            "image": null
          },
          {
            "id": "8xt6",
            "text": "The driver should include a detailed account of the de-escalation techniques used, any seating changes, and conversations held with students involved.",
            "correct": true,
            "feedback": "",
            "image": null
          },
          {
            "id": "zhOL",
            "text": "The driver should only note that the situation was resolved, without detailing specific interventions.",
            "correct": false,
            "feedback": "",
            "image": null
          }
        ],
        "feedback": "",
        "feedbackWhenCorrect": "",
        "selectMultiple": false,
        "feedbackMode": "correct / incorrect",
        "finalFeedbackMode": "full",
        "question": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "A bus driver witnesses a student being repeatedly subjected to verbal taunts. The driver intervenes and de-escalates the situation. Which of the following best describes the most appropriate action regarding the \"Driver's Actions Taken\" section of the incident report?"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "graded": true,
        "contributingToScore": true
      }
    },
    "USAC": {
      "order": "a6",
      "parentId": "3ZFB",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "More overtly, students might physically block someone from sitting with them or participating in a group activity on the bus,\nmaking their exclusion undeniable."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "More overtly, students might physically block someone from sitting with them or participating in a group activity on the bus,\nmaking their exclusion undeniable.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2F489ecf12-b4fb-45f6-adb7-173684dc3ea9%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 10501
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": null
        },
        "textColor": "#FFFFFF"
      }
    },
    "bJfR": {
      "order": "aC",
      "parentId": "u1xs",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "With consistent vigilance and timely intervention, school bus drivers play a vital role in creating a positive and respectful\nenvironment for all students, making every ride a safe one."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "With consistent vigilance and timely intervention, school bus drivers play a vital role in creating a positive and respectful\nenvironment for all students, making every ride a safe one.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fb6d10abc-42ed-4bfd-9142-f78d93c8fd24%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 11624
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": {
            "type": "image",
            "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fc6782a3d-3067-415a-a6df-9ccac9abe62d%2Fgenerated-image.jpg",
            "opacity": 0.5
          }
        },
        "textColor": "#FFFFFF"
      }
    },
    "v0P2": {
      "order": "a0",
      "parentId": "k9-8",
      "type": "imageElement",
      "data": {
        "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fc1af5b69-62cd-43df-9a59-b3775b569601%2Fgenerated-image.jpg",
        "imageDescription": "A bus driver's hand gripping the steering wheel, knuckles white, indicating stress.",
        "objectFit": "cover"
      }
    },
    "txYJ": {
      "type": "dialogueNode",
      "data": {
        "scene": {
          "id": "C7rA"
        },
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "You chose 'Not Bullying' for \"A group of students repeatedly spreads false rumors about a classmate on social media for several weeks.\" Does the \"repeatedly\" and \"false rumors\" on \"social media\" change your perspective?"
                }
              ]
            }
          ]
        },
        "characterPose": {
          "type": "uploaded",
          "image": {
            "source": "assets/images/eric-confused.png",
            "altText": "eric confused",
            "rightsType": "Unknown",
            "sourceType": "Unknown",
            "aspectRatio": null
          },
          "layout": "default"
        },
        "options": [
          {
            "next": {
              "type": "node",
              "id": "LFGW"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "I think online interactions are different and not always bullying."
                    }
                  ]
                }
              ]
            },
            "feedback": "While the medium is different, the impact and intent can be the same. Let's try this scenario again with the full definition of bullying in mind.",
            "id": "idBW",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "disappointed",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "node",
              "id": "iQoy"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "This is definitely 'Bullying' due to repetition, intent, and harm."
                    }
                  ]
                }
              ]
            },
            "feedback": "Correct. Cyberbullying is a serious issue that fits the criteria.",
            "id": "c19O",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "neutral",
              "type": "preset"
            }
          }
        ],
        "randomizeOptions": true,
        "showMessageHistory": true,
        "showReactionWithoutFeedback": true
      },
      "position": {
        "x": 8550,
        "y": -250
      },
      "parentId": "2127"
    },
    "Qh08": {
      "type": "dialogueNode",
      "data": {
        "scene": {
          "id": "C7rA"
        },
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Here's the first scenario: \"A student teases another student once about their new haircut.\" Is this Bullying or Not Bullying?"
                }
              ]
            }
          ]
        },
        "characterPose": {
          "type": "uploaded",
          "image": {
            "source": "assets/images/eric-asking.png",
            "altText": "eric asking",
            "rightsType": "Unknown",
            "sourceType": "Unknown",
            "aspectRatio": null
          },
          "layout": "default"
        },
        "options": [
          {
            "next": {
              "type": "node",
              "id": "ggmX"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Not Bullying."
                    }
                  ]
                }
              ]
            },
            "feedback": "Correct! While unkind, a single instance of teasing doesn't typically meet the criteria for bullying.",
            "id": "KYNC",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "happy",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "node",
              "id": "_c9G"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Bullying."
                    }
                  ]
                }
              ]
            },
            "feedback": "Consider the elements of repetition and intent. Let's re-evaluate.",
            "id": "wr1a",
            "characterReaction": {
              "characterId": "sophia",
              "emotion": "neutral",
              "type": "preset"
            }
          }
        ],
        "randomizeOptions": true,
        "showMessageHistory": true,
        "showReactionWithoutFeedback": true
      },
      "position": {
        "x": 1900,
        "y": 250
      },
      "parentId": "2127"
    },
    "nSy2": {
      "type": "questionTile",
      "data": {
        "options": [
          {
            "id": "bCCL",
            "text": "To provide a record of the driver's effectiveness in managing student behavior.",
            "correct": false,
            "feedback": "",
            "image": null
          },
          {
            "id": "b9l-",
            "text": "To simply fulfill a bureaucratic requirement without significant impact on student safety.",
            "correct": false,
            "feedback": "",
            "image": null
          },
          {
            "id": "6w7h",
            "text": "To ensure the driver is not held responsible if the bullying recurs.",
            "correct": false,
            "feedback": "",
            "image": null
          },
          {
            "id": "bf4g",
            "text": "To allow the school to implement a long-term support plan for the victim and address the aggressors' behavior.",
            "correct": true,
            "feedback": "",
            "image": null
          }
        ],
        "feedback": "",
        "feedbackWhenCorrect": "",
        "selectMultiple": false,
        "feedbackMode": "correct / incorrect",
        "finalFeedbackMode": "full",
        "question": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "After a bus driver successfully intervenes in a bullying incident involving repeated teasing and exclusion, what is the most critical reason for reporting the incident to school administration, even if the immediate behavior has stopped?"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "graded": true,
        "contributingToScore": true
      }
    },
    "-N2G": {
      "type": "textNode",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Many organizations offer resources on bullying prevention and intervention. Websites like StopBullying.gov or local school district sites are great places to start. Don't hesitate to seek them out. Let's conclude our session."
                }
              ]
            }
          ]
        },
        "next": {
          "type": "node",
          "id": "fy0N"
        },
        "characterPose": {
          "characterId": "eric",
          "emotion": "talking",
          "type": "preset"
        },
        "scene": {
          "id": "C7rA"
        }
      },
      "position": {
        "x": 14250,
        "y": -250
      },
      "parentId": "2127"
    },
    "Ibmo": {
      "order": "a0",
      "parentId": "I4XQ",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Retreating Inward"
                }
              ],
              "attrs": {
                "level": 3
              }
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "center"
      }
    },
    "VMBH": {
      "order": "a1",
      "parentId": "is6L",
      "type": "imageElement",
      "data": {
        "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2F33be00c8-b31f-459f-8439-271b4046f89e%2Fgenerated-image.jpg",
        "imageDescription": "A group of three students chatting and laughing together on a school bus, with a fourth student standing nearby, looking hesitant and being clearly ignored.",
        "objectFit": "cover"
      }
    },
    "D9Kn": {
      "type": "tiledLayout",
      "data": {},
      "layout": {
        "rows": [
          {
            "rowId": "Ofkv",
            "relativeHeight": null,
            "relativeWidth": 0.7,
            "tiles": [
              {
                "tileId": "52EM",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "2sfq",
            "relativeHeight": 0.5625,
            "relativeWidth": 0.7,
            "tiles": [
              {
                "tileId": "0kE2",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "Sdci",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "979e",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "AXtu",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "TPF9",
                "relativeWidth": 1
              }
            ]
          }
        ]
      },
      "sectionDivider": false
    },
    "BtkP": {
      "type": "sceneNode",
      "data": {
        "background": {
          "aspectRatio": 1,
          "sourceType": "Upload",
          "rightsType": "Uploaded",
          "source": "./assets/images/scene-Scene 6.png"
        },
        "name": "Scene 6",
        "order": "a5"
      },
      "parentId": "cQIB"
    },
    "JhN_": {
      "order": "a7",
      "parentId": "3ZFB",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "The key elements of bullying are repetition and a power imbalance. These actions aren't one-offs; they form a consistent pattern,\nmaking the victim feel helpless and targeted."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "The key elements of bullying are repetition and a power imbalance. These actions aren't one-offs; they form a consistent pattern,\nmaking the victim feel helpless and targeted.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fcd2bd0a8-14ec-43d8-b292-b71a64e444a9%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 10553
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": null
        },
        "textColor": "#FFFFFF"
      }
    },
    "i6QE": {
      "order": "a0",
      "parentId": "GzY_",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Victim's Experience"
                }
              ],
              "attrs": {
                "level": 3
              }
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Anxiety and fear"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Isolation"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "left"
      }
    },
    "KkNJ": {
      "type": "tiledLayout",
      "data": {},
      "layout": {
        "rows": [
          {
            "rowId": "byrR",
            "relativeHeight": 1,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "FlRF",
                "relativeWidth": 0.5
              },
              {
                "tileId": "npRl",
                "relativeWidth": 0.5
              }
            ]
          },
          {
            "rowId": "_xgK",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "cQIB",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "NBMS",
            "relativeHeight": null,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "4m2Z",
                "relativeWidth": 0.5
              },
              {
                "tileId": "49MO",
                "relativeWidth": 0.5
              }
            ]
          },
          {
            "rowId": "8sfE",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "nSy2",
                "relativeWidth": 1
              }
            ]
          }
        ]
      },
      "sectionDivider": false
    },
    "nmH8": {
      "order": "a1",
      "parentId": "JhN_",
      "type": "imageElement",
      "data": {
        "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fd997b8ed-1007-4598-b370-7356b07efb53%2Fgenerated-image.jpg",
        "imageDescription": "A rapid sequence of blurred images depicting various bullying behaviors: a whisper, a nudge, a turned back, suggesting repeated incidents.",
        "objectFit": "cover"
      }
    },
    "Xm_I": {
      "type": "tiledLayout",
      "data": {},
      "layout": {
        "rows": [
          {
            "rowId": "BHxc",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "A72s",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "gZFt",
            "relativeHeight": 1,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "4VQU",
                "relativeWidth": 0.5
              },
              {
                "tileId": "viX1",
                "relativeWidth": 0.5
              }
            ]
          },
          {
            "rowId": "FGbD",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "dGok",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "ViLU",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "1XaG",
                "relativeWidth": 1
              }
            ]
          }
        ]
      },
      "sectionDivider": false
    },
    "ZEGO": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Types of Bullying"
                }
              ],
              "attrs": {
                "level": 3
              }
            },
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Bullying can manifest in various forms, each with distinct characteristics and impacts. Recognizing these different types is essential for identifying bullying behaviors on the school bus and responding appropriately."
                }
              ]
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "PS2D": {
      "order": "a1",
      "parentId": "3H6a",
      "type": "imageElement",
      "data": {
        "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2F01d37e2e-b985-4c9b-bb02-f07b80e6ba22%2Fgenerated-image.jpg",
        "imageDescription": "Two students standing in a crowded school bus aisle, one student slightly bumping into the other with a backpack, making it look unintentional.",
        "objectFit": "cover"
      }
    },
    "tBRa": {
      "type": "sceneNode",
      "data": {
        "background": {
          "aspectRatio": 1.498046875,
          "sourceType": "Upload",
          "rightsType": "Uploaded",
          "source": "./assets/images/scene-Scene 1.png"
        },
        "name": "Scene 1",
        "order": "a0"
      },
      "parentId": "cQIB"
    },
    "viX1": {
      "type": "imageTile",
      "data": {
        "image": {
          "altText": "photorealistic image of a school bus driver observing students in the rearview mirror with a thoughtful expression, looking for signs of distress, in great lighting, one person.",
          "aspectRatio": 1,
          "imageId": "uploads/ad63e5e4-f22a-4183-a635-a1a9000468eb/generated-image.jpg",
          "searchTerm": "photorealistic image of a school bus driver observing students in the rearview mirror with a thoughtful expression, looking for signs of distress, in great lighting, one person.",
          "sourceType": "Generated",
          "rightsType": "Unknown",
          "layout": "right-full",
          "source": "./assets/images/image-5455125b-f2ff-4ea6-866f-fe309be3225f.png",
          "thumbnail": "https://storage.googleapis.com/mindsmith/uploads%2Fad63e5e4-f22a-4183-a635-a1a9000468eb%2Fgenerated-image.jpg"
        },
        "objectFit": "cover",
        "status": "Available"
      }
    },
    "L390": {
      "order": "a0",
      "parentId": "MMZU",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Restored Calm"
                }
              ],
              "attrs": {
                "level": 1
              }
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "center"
      }
    },
    "JVGG": {
      "order": "a0",
      "parentId": "qZuv",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "The Daily Commute"
                }
              ],
              "attrs": {
                "level": 1
              }
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "center"
      }
    },
    "1XaG": {
      "type": "questionTile",
      "data": {
        "options": [
          {
            "id": "oYlC",
            "text": "Student frequently sits alone and avoids eye contact.",
            "correct": true,
            "feedback": "",
            "image": null
          },
          {
            "id": "yfAJ",
            "text": "Student expresses enjoyment of bus rides and arrives early.",
            "correct": false,
            "feedback": "",
            "image": null
          },
          {
            "id": "PJO8",
            "text": "Student laughs loudly with friends in the middle of the bus.",
            "correct": false,
            "feedback": "",
            "image": null
          },
          {
            "id": "jz7j",
            "text": "Student appears relaxed and engaged in conversation with peers.",
            "correct": false,
            "feedback": "",
            "image": null
          }
        ],
        "feedback": "",
        "feedbackWhenCorrect": "",
        "selectMultiple": false,
        "feedbackMode": "correct / incorrect",
        "finalFeedbackMode": "full",
        "question": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Which of the following is a warning sign that a student might be experiencing bullying on the school bus?"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "graded": true,
        "contributingToScore": true
      }
    },
    "kgDa": {
      "order": "a6",
      "parentId": "u1xs",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "The isolation can be profound. When a student is deliberately excluded, they feel alone and vulnerable, amplifying the emotional\nimpact of the bullying."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "The isolation can be profound. When a student is deliberately excluded, they feel alone and vulnerable, amplifying the emotional\nimpact of the bullying.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2F7072bf8b-3ba1-4859-9823-bbc88c906d28%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 9953
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": {
            "type": "image",
            "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2F338465bf-9e53-443f-9b05-40633681141c%2Fgenerated-image.jpg",
            "opacity": 0.5
          }
        },
        "textColor": "#FFFFFF"
      }
    },
    "zA4P": {
      "type": "dialogueNode",
      "data": {
        "scene": {
          "id": "C7rA"
        },
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Remember, identifying bullying is the first step towards addressing it. Keep practicing these skills and advocating for a safe environment."
                }
              ]
            }
          ]
        },
        "characterPose": {
          "type": "uploaded",
          "image": {
            "source": "assets/images/eric-neutral.png",
            "altText": "eric neutral",
            "rightsType": "Unknown",
            "sourceType": "Unknown",
            "aspectRatio": null
          },
          "layout": "default"
        },
        "options": [
          {
            "next": {
              "type": "node",
              "id": "fy0N"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "I'll keep these principles in mind and speak up when needed."
                    }
                  ]
                }
              ]
            },
            "feedback": "Fantastic! Your awareness can make a real difference.",
            "id": "EQwg",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "happy",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "node",
              "id": "-N2G"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "I'm not sure where else to find resources or practice."
                    }
                  ]
                }
              ]
            },
            "feedback": "There are many resources available. Let me point you in the right direction.",
            "id": "dQvj",
            "characterReaction": {
              "characterId": "sophia",
              "emotion": "neutral",
              "type": "preset"
            }
          }
        ],
        "randomizeOptions": true,
        "showMessageHistory": true,
        "showReactionWithoutFeedback": true
      },
      "position": {
        "x": 13300,
        "y": 250
      },
      "parentId": "2127"
    },
    "6pMV": {
      "type": "textNode",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Moving the victim without addressing the bullies' behavior can inadvertently empower them and make the victim feel further isolated."
                }
              ]
            }
          ]
        },
        "next": {
          "type": "node",
          "id": "IuZN"
        },
        "characterPose": {
          "characterId": "sophia",
          "emotion": "disappointed",
          "type": "preset"
        },
        "scene": {
          "id": "BtkP"
        }
      },
      "position": {
        "x": 2850,
        "y": -250
      },
      "parentId": "cQIB"
    },
    "MSHT": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "School bus drivers hold a unique and critical position in the daily lives of students. Beyond safe transportation, you are entrusted with the well-being of passengers, making your role in addressing bullying indispensable. Understanding your specific responsibilities, both "
                },
                {
                  "type": "text",
                  "text": "legal and ethical",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", is fundamental to fostering a secure and respectful environment on the bus."
                }
              ]
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "MMZU": {
      "order": "aA",
      "parentId": "u1xs",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "After intervention, the atmosphere on the bus shifts. The bullies are subdued, and the targeted student shows signs of relief.\nIt's a crucial step towards restoring a sense of safety."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "After intervention, the atmosphere on the bus shifts. The bullies are subdued, and the targeted student shows signs of relief.\nIt's a crucial step towards restoring a sense of safety.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2F558fbd67-02d5-441a-9afa-cda11d1ae901%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 11546
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": {
            "type": "image",
            "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2F3f1db9a1-ad53-4465-b823-ac47e4bcdb10%2Fgenerated-image.jpg",
            "opacity": 0.5
          }
        },
        "textColor": "#FFFFFF"
      }
    },
    "54Rx": {
      "type": "tiledLayout",
      "data": {},
      "layout": {
        "rows": [
          {
            "rowId": "NQti",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "aeXh",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "LtIs",
            "relativeHeight": 1,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "9Nzj",
                "relativeWidth": 0.5
              },
              {
                "tileId": "1i4b",
                "relativeWidth": 0.5
              }
            ]
          },
          {
            "rowId": "k1Rm",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "-jjJ",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "X2yW",
            "relativeHeight": null,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "-zFM",
                "relativeWidth": 0.5
              },
              {
                "tileId": "85kL",
                "relativeWidth": 0.5
              }
            ]
          },
          {
            "rowId": "klzE",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "bQ2N",
                "relativeWidth": 1
              }
            ]
          }
        ]
      },
      "sectionDivider": false
    },
    "2KqD": {
      "type": "dialogueNode",
      "data": {
        "scene": {
          "id": "_WbO"
        },
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hey, look at Maria's old backpack! Is that from the dinosaur age?"
                }
              ]
            }
          ]
        },
        "characterPose": {
          "type": "uploaded",
          "image": {
            "source": "assets/images/alyssa-neutral.png",
            "altText": "alyssa neutral",
            "rightsType": "Unknown",
            "sourceType": "Unknown",
            "aspectRatio": null
          },
          "layout": "default"
        },
        "options": [
          {
            "next": {
              "type": "node",
              "id": "Oyuf"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Excuse me, that's not appropriate language on this bus."
                    }
                  ]
                }
              ]
            },
            "feedback": "Correct. Addressing the behavior directly and calmly is an effective first step in de-escalation.",
            "id": "MYra",
            "characterReaction": {
              "characterId": "sophia",
              "emotion": "thinking",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "node",
              "id": "mS22"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "I'll just keep an eye on them for now; it might stop."
                    }
                  ]
                }
              ]
            },
            "feedback": "While observation is important, delaying intervention can allow bullying to escalate. Try a more direct approach.",
            "id": "k8YN",
            "characterReaction": {
              "characterId": "sophia",
              "emotion": "confused",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "complete",
              "result": "correct"
            },
            "text": "",
            "feedback": null,
            "id": "HzX6",
            "characterReaction": null
          }
        ],
        "randomizeOptions": true,
        "showMessageHistory": true,
        "showReactionWithoutFeedback": true
      },
      "position": {
        "x": 0,
        "y": -250
      },
      "parentId": "cQIB"
    },
    "0iq5": {
      "type": "processTile",
      "data": {
        "elements": [
          {
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "heading",
                  "content": [
                    {
                      "type": "text",
                      "text": "Noticing Distress"
                    }
                  ],
                  "attrs": {
                    "level": 3
                  }
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "The bus driver, Mr. Harrison, a veteran with years of experience, began to notice subtle changes in Sarah's behavior. Unlike other students who boarded with lively chatter, Sarah would quietly slip into her seat, her shoulders hunched, and her gaze fixed downwards. He also observed the consistent grouping of older students near her, often accompanied by hushed laughter and glances in Sarah's direction. Mr. Harrison's keen observation skills, honed over years of monitoring student interactions, allowed him to perceive that Sarah's quietness was not simply shyness, but a manifestation of distress."
                    }
                  ]
                }
              ]
            },
            "media": null,
            "id": "itIz",
            "justify": null
          },
          {
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "heading",
                  "content": [
                    {
                      "type": "text",
                      "text": "Discreet Observation and Initial Steps"
                    }
                  ],
                  "attrs": {
                    "level": 3
                  }
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Instead of immediate confrontation, Mr. Harrison began to discreetly monitor the interactions more closely through his rearview mirror. He noted the pattern of behavior, identifying the primary aggressors and the specific times the bullying occurred. During a stop, he made eye contact with Sarah, offering a small, reassuring smile. He then strategically adjusted seating arrangements, placing a few older, more responsible students closer to Sarah's area and subtly increasing his visual checks of that section of the bus."
                    }
                  ]
                }
              ]
            },
            "media": null,
            "id": "Zavk",
            "justify": null
          },
          {
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "heading",
                  "content": [
                    {
                      "type": "text",
                      "text": "Direct Intervention and Support"
                    }
                  ],
                  "attrs": {
                    "level": 3
                  }
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "When the bullying behavior continued, albeit more subtly, Mr. Harrison decided on a direct, yet calm, intervention. He pulled the bus over safely and addressed the entire bus, reminding students of the code of conduct regarding respectful behavior. He then spoke privately with the students involved in the bullying, emphasizing the impact of their actions and the importance of a safe environment for everyone. He also spoke with Sarah, assuring her that he was there to help and that she did not have to endure such treatment. He offered her a seat closer to the front of the bus, which she gratefully accepted."
                    }
                  ]
                }
              ]
            },
            "media": null,
            "id": "UB6p",
            "justify": null
          },
          {
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "heading",
                  "content": [
                    {
                      "type": "text",
                      "text": "Reporting and Follow-Up"
                    }
                  ],
                  "attrs": {
                    "level": 3
                  }
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Following the incident, Mr. Harrison meticulously documented the events, including dates, times, students involved, and the actions he took. He reported the incident to the school administration, ensuring that the school's anti-bullying policies were activated. This comprehensive report allowed school officials to conduct further investigations and implement appropriate disciplinary actions and support for Sarah. Mr. Harrison continued to monitor the situation on his bus, ensuring that the positive changes were sustained and that Sarah felt safe and supported."
                    }
                  ]
                }
              ]
            },
            "media": null,
            "id": "I1xf",
            "justify": null
          }
        ],
        "hasIntro": true,
        "hasOutro": true,
        "intro": {
          "content": {
            "type": "doc",
            "content": [
              {
                "type": "heading",
                "content": [
                  {
                    "type": "text",
                    "text": "Driver's Intervention: A Turning Point"
                  }
                ],
                "attrs": {
                  "level": 2
                }
              }
            ]
          },
          "media": null,
          "id": "YcrE",
          "justify": null
        },
        "outro": {
          "content": {
            "type": "doc",
            "content": [
              {
                "type": "heading",
                "content": [
                  {
                    "type": "text",
                    "text": "Positive Outcomes of the Intervention"
                  }
                ],
                "attrs": {
                  "level": 2
                }
              },
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Mr. Harrison's attentive observation and decisive, yet measured, intervention had a profound positive impact on Sarah. Her anxiety about riding the bus significantly decreased, and she gradually regained her confidence. The bus became a safe space once more, allowing her to focus on her studies and social life without the constant dread of bullying. This case highlights the critical role bus drivers play not just as transporters, but as frontline protectors of student well-being."
                  }
                ]
              }
            ]
          },
          "media": null,
          "id": "f8wR",
          "justify": null
        }
      },
      "elementColor": {
        "alias": "accent-1"
      }
    },
    "Adgu": {
      "order": "a1",
      "parentId": "rd2R",
      "type": "imageElement",
      "data": {
        "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2F2ad0c0f1-bd01-49ae-8864-0cfb83639804%2Fgenerated-image.jpg",
        "imageDescription": "One student deliberately pushing another student into a bus seat, with the pushed student showing a surprised or uncomfortable expression.",
        "objectFit": "cover"
      }
    },
    "9nDy": {
      "type": "textNode",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It's understandable to find it tricky sometimes. Bullying can be subtle. The important thing is to keep those core definitions in mind: repetition, intent, and power imbalance. With practice, it becomes clearer. Let's reflect on your confidence again."
                }
              ]
            }
          ]
        },
        "next": {
          "type": "node",
          "id": "zA4P"
        },
        "characterPose": {
          "characterId": "eric",
          "emotion": "thinking",
          "type": "preset"
        },
        "scene": {
          "id": "C7rA"
        }
      },
      "position": {
        "x": 12350,
        "y": -250
      },
      "parentId": "2127"
    },
    "QMR3": {
      "type": "tiledLayout",
      "data": {},
      "layout": {
        "rows": [
          {
            "rowId": "AoeP",
            "relativeHeight": 1,
            "relativeWidth": null,
            "tiles": [
              {
                "tileId": "2127",
                "relativeWidth": null
              }
            ]
          }
        ]
      },
      "sectionDivider": false
    },
    "is6L": {
      "order": "a5",
      "parentId": "3ZFB",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "Social exclusion is a powerful form of bullying. It can be as simple as a group of friends intentionally ignoring a student trying\nto join their conversation or activity."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "Social exclusion is a powerful form of bullying. It can be as simple as a group of friends intentionally ignoring a student trying\nto join their conversation or activity.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fe284b206-85f8-4b10-a6f2-1a56ea398db7%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 10371
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": null
        },
        "textColor": "#FFFFFF"
      }
    },
    "hUuJ": {
      "type": "listTile",
      "data": {
        "items": [
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Do: Intervene Calmly and Safely",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " When you observe bullying, act promptly but with a calm demeanor. Ensure the bus is safely stopped before addressing the students. Use a firm, neutral tone to de-escalate the situation and separate those involved."
                    }
                  ]
                }
              ]
            },
            "id": "PAmY"
          },
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Don't: Ignore or Dismiss Complaints",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " Never disregard a student's complaint about bullying, no matter how minor it may seem. Every report deserves your full attention and a proper response. Ignoring complaints can lead to escalation and a loss of trust."
                    }
                  ]
                }
              ]
            },
            "id": "cAm0"
          },
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Do: Report All Incidents of Bullying",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " Documentation and reporting are essential. Even if you resolve an incident on the bus, it must be reported to the appropriate school administration. This ensures that a formal record is kept and that further action can be taken if necessary."
                    }
                  ]
                }
              ]
            },
            "id": "b7Z_"
          },
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Don't: Confront Students Aggressively",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " Aggressive confrontation can provoke further conflict and fear. Avoid yelling, shaming, or using accusatory language. Your goal is to resolve the situation and maintain safety, not to punish on the spot."
                    }
                  ]
                }
              ]
            },
            "id": "IdHJ"
          }
        ],
        "columns": "2",
        "mode": "Bulleted"
      }
    },
    "P2nH": {
      "type": "sceneNode",
      "data": {
        "background": {
          "aspectRatio": 1,
          "sourceType": "Upload",
          "rightsType": "Uploaded",
          "source": "./assets/images/scene-Scene 7.png"
        },
        "name": "Scene 7",
        "order": "a6"
      },
      "parentId": "cQIB"
    },
    "6yd0": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Understanding Bullying: Definition and Types"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "title"
      }
    },
    "dlxJ": {
      "order": "a1",
      "parentId": "u1xs",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "Sometimes, subtle behaviors can signal the start of something more serious. A quiet whisper, a pointed finger, a shared glance –\nthese can be the first signs of discomfort for a student."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "Sometimes, subtle behaviors can signal the start of something more serious. A quiet whisper, a pointed finger, a shared glance –\nthese can be the first signs of discomfort for a student.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2Faab0993f-396c-45d0-983f-a346e9697fbf%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 12565
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": {
            "type": "image",
            "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fde9eab78-c07a-4a20-9d3a-f6d4a1b01a53%2Fgenerated-image.jpg",
            "opacity": 0.5
          }
        },
        "textColor": "#FFFFFF"
      }
    },
    "FEEQ": {
      "type": "tiledLayout",
      "data": {},
      "layout": {
        "rows": [
          {
            "rowId": "yLV4",
            "relativeHeight": null,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "9VKW",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "ABan",
            "relativeHeight": 1,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "1CAF",
                "relativeWidth": 0.5
              },
              {
                "tileId": "GcJk",
                "relativeWidth": 0.5
              }
            ]
          }
        ]
      },
      "sectionDivider": true
    },
    "v5gh": {
      "order": "a0",
      "parentId": "is6L",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Social Exclusion"
                }
              ],
              "attrs": {
                "level": 3
              }
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Ignoring attempts to join"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Turning backs"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "left"
      }
    },
    "6ydp": {
      "type": "tiledLayout",
      "data": {},
      "layout": {
        "rows": [
          {
            "rowId": "3fOv",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "6yd0",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "S2yJ",
            "relativeHeight": 1,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "hE50",
                "relativeWidth": 0.5
              },
              {
                "tileId": "t2BE",
                "relativeWidth": 0.5
              }
            ]
          },
          {
            "rowId": "bwIu",
            "relativeHeight": null,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "ResK",
                "relativeWidth": 0.5
              },
              {
                "tileId": "0tq2",
                "relativeWidth": 0.5
              }
            ]
          },
          {
            "rowId": "oQUW",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "ZEGO",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "iecx",
            "relativeHeight": null,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "2iNG",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "6nC4",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "3ZFB",
                "relativeWidth": 1
              }
            ]
          }
        ]
      },
      "sectionDivider": false
    },
    "_WbO": {
      "type": "sceneNode",
      "data": {
        "background": {
          "aspectRatio": 1,
          "sourceType": "Upload",
          "rightsType": "Uploaded",
          "source": "./assets/images/scene-Scene 3.png"
        },
        "name": "Scene 3",
        "order": "a2"
      },
      "parentId": "cQIB"
    },
    "c9fz": {
      "type": "imageTile",
      "data": {
        "image": {
          "aspectRatio": 1,
          "searchTerm": "photorealistic image of a school bus driver looking confidently into the rearview mirror, reflecting a safe and orderly bus interior with students, in great lighting, one person.",
          "model": "gemini:imagen-4.0-generate-preview-06-06",
          "sourceType": "Generated",
          "rightsType": "Unknown"
        },
        "objectFit": "cover",
        "status": "Empty"
      }
    },
    "thlk": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "attrs": {
                "level": 1
              }
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "PCI4": {
      "order": "a0",
      "parentId": "DcA5",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Your Role: Observe & Act"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "left"
      }
    },
    "IuZN": {
      "type": "dialogueNode",
      "data": {
        "scene": {
          "id": "P2nH"
        },
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The group has quieted down and the teasing has stopped for now. What is your next crucial step?"
                }
              ]
            }
          ]
        },
        "characterPose": {
          "type": "uploaded",
          "image": {
            "source": "assets/images/sophia-neutral.png",
            "altText": "sophia neutral",
            "rightsType": "Unknown",
            "sourceType": "Unknown",
            "aspectRatio": null
          },
          "layout": "default"
        },
        "options": [
          {
            "next": {
              "type": "node",
              "id": "3AYV"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Since the teasing has stopped, I'll just monitor them tomorrow."
                    }
                  ]
                }
              ]
            },
            "feedback": "Even if the immediate behavior ceases, the incident must be reported to ensure proper procedure and prevent recurrence. Try again.",
            "id": "Vh0d",
            "characterReaction": {
              "characterId": "alyssa",
              "emotion": "confused",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "node",
              "id": "sF7L"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "I need to document this incident and report it to school administration."
                    }
                  ]
                }
              ]
            },
            "feedback": "Precisely. Reporting ensures formal documentation, potential follow-up, and aligns with school anti-bullying policies.",
            "id": "rgvE",
            "characterReaction": {
              "characterId": "sophia",
              "emotion": "thinking",
              "type": "preset"
            }
          }
        ],
        "randomizeOptions": true,
        "showMessageHistory": true,
        "showReactionWithoutFeedback": true
      },
      "position": {
        "x": 3800,
        "y": -250
      },
      "parentId": "cQIB"
    },
    "aeXh": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Real-World Application: Reporting Procedures"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "title"
      }
    },
    "EfOa": {
      "type": "sceneNode",
      "data": {
        "background": {
          "aspectRatio": 1,
          "sourceType": "Upload",
          "rightsType": "Uploaded",
          "source": "./assets/images/scene-Scene 9.png"
        },
        "name": "Scene 9",
        "order": "a8"
      },
      "parentId": "cQIB"
    },
    "FPM_": {
      "type": "textNode",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "While meanness is certainly a part of it, the key is to look for repetition, intent to cause harm, and often a power imbalance. These distinguish bullying from a one-off unkind act or a mutual disagreement. Let's try to summarize again."
                }
              ]
            }
          ]
        },
        "next": {
          "type": "node",
          "id": "RaSJ"
        },
        "characterPose": {
          "characterId": "eric",
          "emotion": "neutral",
          "type": "preset"
        },
        "scene": {
          "id": "C7rA"
        }
      },
      "position": {
        "x": 10450,
        "y": -250
      },
      "parentId": "2127"
    },
    "u7y-": {
      "order": "a1",
      "parentId": "DcA5",
      "type": "imageElement",
      "data": {
        "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2F0da5598c-9dc7-42e8-b534-373ef7145b2c%2Fgenerated-image.jpg",
        "imageDescription": "A close-up of a school bus driver's eyes in the rearview mirror, reflecting a focused and attentive gaze towards the students.",
        "objectFit": "cover"
      }
    },
    "dSll": {
      "type": "imageTile",
      "data": {
        "image": {
          "altText": "photorealistic image of a school bus driver with a thoughtful expression, reviewing a policy document, in great lighting, one person.",
          "aspectRatio": 1,
          "imageId": "uploads/75c2a25d-68be-42ea-97e2-21f42ed6151a/generated-image.jpg",
          "searchTerm": "photorealistic image of a school bus driver with a thoughtful expression, reviewing a policy document, in great lighting, one person.",
          "sourceType": "Generated",
          "rightsType": "Unknown",
          "layout": "right-full",
          "source": "./assets/images/image-74fedb2d-1f3c-497d-afcb-29e3a7d5cae1.png",
          "thumbnail": "https://storage.googleapis.com/mindsmith/uploads%2F75c2a25d-68be-42ea-97e2-21f42ed6151a%2Fgenerated-image.jpg"
        },
        "objectFit": "cover",
        "status": "Available"
      }
    },
    "t2BE": {
      "type": "imageTile",
      "data": {
        "image": {
          "altText": "students riding a school bus inside seating down ",
          "aspectRatio": 1,
          "imageId": "uploads/c48ff960-59bd-4306-bf1e-b884ea803b76/generated-image.jpg",
          "sourceId": "",
          "searchTerm": "students riding a school bus inside seating down ",
          "sourceType": "Generated",
          "rightsType": "Generated",
          "source": "./assets/images/image-7534ff7d-5a99-4955-aca3-b7aa9106755c.png",
          "thumbnail": "https://storage.googleapis.com/mindsmith/uploads%2Fc48ff960-59bd-4306-bf1e-b884ea803b76%2Fgenerated-image.jpg"
        },
        "objectFit": "cover",
        "status": "Available"
      }
    },
    "RxFM": {
      "order": "a4",
      "parentId": "u1xs",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "A vigilant bus driver is often the first line of defense. Noticing these subtle changes, observing patterns of interaction, and\npaying attention to the overall atmosphere on the bus are crucial."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "A vigilant bus driver is often the first line of defense. Noticing these subtle changes, observing patterns of interaction, and\npaying attention to the overall atmosphere on the bus are crucial.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fad68fe19-d33f-4776-95f5-904c09251f5f%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 11442
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": null
        },
        "textColor": "#FFFFFF"
      }
    },
    "tiPp": {
      "order": "a0",
      "parentId": "kgDa",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "The Pain of Exclusion"
                }
              ],
              "attrs": {
                "level": 3
              }
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "center"
      }
    },
    "IXMy": {
      "order": "aB",
      "parentId": "u1xs",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "The driver's responsibility doesn't end on the bus. Documenting the incident and reporting it to school administration ensures\nthat appropriate follow-up and support are provided."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "The driver's responsibility doesn't end on the bus. Documenting the incident and reporting it to school administration ensures\nthat appropriate follow-up and support are provided.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fa4fdc43d-9ad8-4a75-b59c-3e93b3526b5c%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 10841
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": null
        },
        "textColor": "#FFFFFF"
      }
    },
    "KyeU": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Defining Bullying and Its Forms"
                }
              ],
              "attrs": {
                "level": 1
              }
            }
          ]
        },
        "justify": "center",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "vOOg": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "The Profound Impact of Bullying on Students"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "title"
      }
    },
    "KxSb": {
      "order": "a0",
      "parentId": "JhN_",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Pattern of Behavior"
                }
              ],
              "attrs": {
                "level": 3
              }
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Repeated actions"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Power dynamics"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "left"
      }
    },
    "4VQU": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "As a school bus driver, your observational skills are invaluable in identifying students who may be experiencing bullying. While not always obvious, certain behavioral and emotional changes can serve as "
                },
                {
                  "type": "text",
                  "text": "warning signs",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " that a student is being targeted. Recognizing these indicators early allows for timely intervention and support, preventing further distress and potential escalation of bullying incidents."
                }
              ]
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "fy0N": {
      "type": "textNode",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "You've successfully completed the \"Is it Bullying?\" activity. Thank you for your thoughtful participation!"
                }
              ]
            }
          ]
        },
        "next": {
          "type": "restart"
        },
        "characterPose": {
          "characterId": "eric",
          "emotion": "happy",
          "type": "preset"
        },
        "scene": {
          "id": "C7rA"
        }
      },
      "position": {
        "x": 15200,
        "y": -250
      },
      "parentId": "2127"
    },
    "jB3Y": {
      "type": "imageTile",
      "data": {
        "image": {
          "altText": "photorealistic image of a school bus driver interacting with students",
          "aspectRatio": 1,
          "imageId": "uploads/a2abb359-0a8f-4673-bc37-8b5fa596254c/generated-image.jpg",
          "sourceId": "",
          "searchTerm": "photorealistic image of a school bus driver interacting with students",
          "sourceType": "Generated",
          "rightsType": "Generated",
          "source": "./assets/images/image-83bd7b7e-7150-4151-9e08-3eb94a318ffc.png",
          "thumbnail": "https://storage.googleapis.com/mindsmith/uploads%2Fa2abb359-0a8f-4673-bc37-8b5fa596254c%2Fgenerated-image.jpg"
        },
        "objectFit": "cover",
        "status": "Available"
      }
    },
    "3ZFB": {
      "type": "editableVideoTile",
      "data": {
        "renderInformation": {
          "id": "cmfu9p9so0003la0427qh9y8w",
          "createdAt": "2025-09-21T22:27:06.425Z",
          "status": "COMPLETE"
        },
        "video": {
          "source": "./assets/videos/editable-video-84876e65-5b2c-4820-a84a-fd243ca250fb.mp4",
          "aspectRatio": 1.7777777777777777,
          "transcript": "Bullying can take many forms, often starting subtly and escalating. As a school bus driver, recognizing these behaviors is\ncrucial. Let's look at some common examples you might encounter on your route. Teasing often begins with seemingly harmless remarks. One student might make fun of another's clothes or backpack, often in a\nhushed tone, but designed to make them feel uncomfortable. If unchecked, teasing can become more direct and public, involving name-calling or spreading rumors. This can make the target feel\nisolated and deeply embarrassed. Physical bullying isn't always overt. It can start with 'accidental' bumps or shoves in crowded spaces, often disguised as\nclumsiness. However, it can quickly escalate to deliberate pushing, shoving, or blocking pathways, designed to intimidate or cause discomfort\nand assert dominance. Social exclusion is a powerful form of bullying. It can be as simple as a group of friends intentionally ignoring a student trying\nto join their conversation or activity. More overtly, students might physically block someone from sitting with them or participating in a group activity on the bus,\nmaking their exclusion undeniable. The key elements of bullying are repetition and a power imbalance. These actions aren't one-offs; they form a consistent pattern,\nmaking the victim feel helpless and targeted. The cumulative effect of these behaviors can be devastating, leading to anxiety, fear, and a reluctance to even ride the bus.\nStudents may appear sad, withdrawn, or show physical symptoms of distress. As a bus driver, recognizing these signs, no matter how subtle, is your first step in creating a safe and inclusive environment\nfor all students. Your vigilance can make a significant difference.",
          "captions": {
            "EN": "https://storage.googleapis.com/mindsmith/video-captions%2Fcmfu9p9so0003la0427qh9y8w%2F639aa40d-b64a-417e-b355-cfee053a228e.vtt"
          },
          "duration": 114435.026
        }
      }
    },
    "mSBL": {
      "order": "a0",
      "parentId": "fHj5",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Direct Communication"
                }
              ],
              "attrs": {
                "level": 3
              }
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "center"
      }
    },
    "Oxpw": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The daily school bus ride, intended to be a routine part of a student's day, can sometimes become a source of significant distress. Consider the case of Sarah, a quiet middle school student whose journey to and from school transformed into a daily ordeal. For weeks, Sarah endured "
                },
                {
                  "type": "text",
                  "text": "verbal bullying",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "social exclusion",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " from a small group of older students seated near the back of the bus. They would whisper insults, make fun of her appearance, and intentionally block her path, creating an environment of constant intimidation."
                }
              ]
            },
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "This persistent bullying led to a profound shift in Sarah's demeanor. She became withdrawn and visibly anxious each morning, dreading the bus ride. Her once bright eyes now often held a distant, worried look. She would try to make herself as small as possible, burying her face in a book or staring out the window, hoping to become invisible. The fear of confrontation and the anticipation of ridicule caused her heart to pound, leading to stomachaches and a reluctance to even leave her house for school. Her parents noticed her increasing apprehension but were initially unaware of the specific cause, attributing it to general school stress."
                }
              ]
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "1UTe": {
      "order": "a1",
      "parentId": "wrec",
      "type": "imageElement",
      "data": {
        "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fb98fd31d-7f62-452a-9e16-2bb3dacf1d77%2Fgenerated-image.jpg",
        "imageDescription": "A group of three students in a school bus seat, laughing and looking towards a single student sitting alone who appears distressed.",
        "objectFit": "cover"
      }
    },
    "peHT": {
      "type": "imageTile",
      "data": {
        "image": {
          "altText": "photorealistic image of a school bus driver looking concerned but determined, reflecting on the responsibility of protecting students from bullying, in great lighting, one person.",
          "aspectRatio": 1,
          "imageId": "uploads/0f476cef-435d-46fa-9b0b-64e3958fc532/generated-image.jpg",
          "searchTerm": "photorealistic image of a school bus driver looking concerned but determined, reflecting on the responsibility of protecting students from bullying, in great lighting, one person.",
          "sourceType": "Generated",
          "rightsType": "Unknown",
          "layout": "right-full",
          "source": "./assets/images/image-8e6cc601-f689-46fa-a859-fb2f04ab7e66.png",
          "thumbnail": "https://storage.googleapis.com/mindsmith/uploads%2F0f476cef-435d-46fa-9b0b-64e3958fc532%2Fgenerated-image.jpg"
        },
        "objectFit": "cover",
        "status": "Available"
      }
    },
    "pZ45": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Bullying is not merely an interpersonal conflict; it is a pervasive issue with significant consequences for students. Understanding the prevalence and deep-seated effects of bullying is crucial for school bus drivers, as you are often on the front lines, observing these behaviors and their impact. Your awareness and proactive intervention can make a substantial difference in a student's daily experience and overall well-being."
                }
              ]
            },
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Statistics reveal a stark reality: "
                },
                {
                  "type": "text",
                  "text": "1 in 5 students report being bullied",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " during their school years. This statistic underscores the widespread nature of the problem, indicating that a significant portion of the student population regularly faces aggression, intimidation, or exclusion. On a school bus, where students are in a confined space for extended periods, the potential for bullying to occur and its effects to be amplified is considerable."
                }
              ]
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "ZM5J": {
      "type": "buttonsTile",
      "data": {
        "items": [
          {
            "id": "qcfu",
            "label": "Begin",
            "destination": {
              "type": "next",
              "value": ""
            },
            "style": "primary"
          }
        ],
        "justify": "left",
        "align": "center",
        "size": "small",
        "fullWidth": false
      }
    },
    "cQIB": {
      "type": "experienceTile",
      "data": {
        "root": {
          "type": "node",
          "id": "2KqD"
        }
      }
    },
    "Oyuf": {
      "type": "dialogueNode",
      "data": {
        "scene": {
          "id": "TzfK"
        },
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "You can't sit here, Maria! We don't want you in our group. And your shoes are so ugly!"
                }
              ]
            }
          ]
        },
        "characterPose": {
          "type": "uploaded",
          "image": {
            "source": "assets/images/alyssa-talking.png",
            "altText": "alyssa talking",
            "rightsType": "Unknown",
            "sourceType": "Unknown",
            "aspectRatio": null
          },
          "layout": "default"
        },
        "options": [
          {
            "next": {
              "type": "node",
              "id": "6pMV"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Maria, why don't you move to a different seat up front?"
                    }
                  ]
                }
              ]
            },
            "feedback": "While re-seating can provide immediate relief, it doesn't address the root cause of the bullying or hold the aggressors accountable. Try again.",
            "id": "UgCP",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "thinking",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "node",
              "id": "IuZN"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Everyone has a right to sit where they choose. Stop the exclusion and name-calling immediately."
                    }
                  ]
                }
              ]
            },
            "feedback": "Excellent. You addressed both the exclusionary behavior and the verbal taunts, reinforcing an inclusive environment.",
            "id": "xA2t",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "neutral",
              "type": "preset"
            }
          }
        ],
        "randomizeOptions": true,
        "showMessageHistory": true,
        "showReactionWithoutFeedback": true
      },
      "position": {
        "x": 1900,
        "y": 250
      },
      "parentId": "cQIB"
    },
    "I2lc": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Far-Reaching Effects of Bullying"
                }
              ],
              "attrs": {
                "level": 3
              }
            },
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The consequences of bullying extend far beyond immediate discomfort; they can profoundly affect a student's mental health, social development, and academic trajectory. For victims, the experience can be isolating and traumatic, leading to a range of emotional and behavioral issues that impact their ability to learn and thrive. Recognizing these effects can help drivers understand the gravity of their role in prevention and intervention."
                }
              ]
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "a-CR": {
      "order": "a0",
      "parentId": "rd2R",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Deliberate Shoving"
                }
              ],
              "attrs": {
                "level": 3
              }
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Blocking paths"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Forcing into seats"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "left"
      }
    },
    "9VKW": {
      "type": "sectionCalloutTile",
      "data": {
        "justify": "left",
        "align": "center"
      }
    },
    "4JFn": {
      "type": "imageTile",
      "data": {
        "image": {
          "altText": "photorealistic image of a single student sitting alone on a school bus, looking out the window with a somber expression, in great lighting.",
          "aspectRatio": 1,
          "imageId": "uploads/9f55728a-df3f-4fb8-8cf9-0bfb36d4399c/generated-image.jpg",
          "searchTerm": "photorealistic image of a single student sitting alone on a school bus, looking out the window with a somber expression, in great lighting.",
          "sourceType": "Generated",
          "rightsType": "Unknown",
          "layout": "right-full",
          "source": "./assets/images/image-9f93e277-78cc-4229-9ff6-46f372db60c8.png",
          "thumbnail": "https://storage.googleapis.com/mindsmith/uploads%2F9f55728a-df3f-4fb8-8cf9-0bfb36d4399c%2Fgenerated-image.jpg"
        },
        "objectFit": "cover",
        "status": "Available"
      }
    },
    "HqKt": {
      "order": "a0",
      "parentId": "ZWWq",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Recognizing Bullying on the Bus"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "left"
      }
    },
    "wid6": {
      "order": "a0",
      "parentId": "dlxJ",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Subtle Beginnings"
                }
              ],
              "attrs": {
                "level": 3
              }
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "center"
      }
    },
    "DcA5": {
      "order": "a9",
      "parentId": "3ZFB",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "As a bus driver, recognizing these signs, no matter how subtle, is your first step in creating a safe and inclusive environment\nfor all students. Your vigilance can make a significant difference."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "As a bus driver, recognizing these signs, no matter how subtle, is your first step in creating a safe and inclusive environment\nfor all students. Your vigilance can make a significant difference.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fb1062fc4-c38b-4429-98b4-35241ccf2521%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 12800
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": null
        },
        "textColor": "#FFFFFF"
      }
    },
    "q_o8": {
      "order": "a0",
      "parentId": "Wcmp",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Subtle Teasing"
                }
              ],
              "attrs": {
                "level": 3
              }
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Whispering remarks"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Mocking appearance"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "left"
      }
    },
    "MeJw": {
      "type": "dialogueNode",
      "data": {
        "scene": {
          "id": "C7rA"
        },
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "You categorized \"A student is intentionally excluded daily from lunch by a group of peers\" as 'Not Bullying'. Think about the words \"daily\" and \"intentionally excluded.\" Do those suggest a pattern of harm?"
                }
              ]
            }
          ]
        },
        "characterPose": {
          "type": "uploaded",
          "image": {
            "source": "assets/images/eric-worried.png",
            "altText": "eric worried",
            "rightsType": "Unknown",
            "sourceType": "Unknown",
            "aspectRatio": null
          },
          "layout": "default"
        },
        "options": [
          {
            "next": {
              "type": "node",
              "id": "ggmX"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "I still don't see exclusion as bullying unless there's physical harm."
                    }
                  ]
                }
              ]
            },
            "feedback": "Bullying can take many forms, including social and emotional. Let's revisit this scenario.",
            "id": "C4Mt",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "disappointed",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "node",
              "id": "mSW5"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "My mistake, 'Bullying' due to repetition and intent to cause distress."
                    }
                  ]
                }
              ]
            },
            "feedback": "That's right. Social exclusion, especially when repeated and intentional, is a form of bullying.",
            "id": "DMS7",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "neutral",
              "type": "preset"
            }
          }
        ],
        "randomizeOptions": true,
        "showMessageHistory": true,
        "showReactionWithoutFeedback": true
      },
      "position": {
        "x": 4750,
        "y": -250
      },
      "parentId": "2127"
    },
    "2iNG": {
      "type": "flashcardsTile",
      "data": {
        "items": [
          {
            "front": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Physical Bullying",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "frontType": "text",
            "frontImage": null,
            "back": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Involves direct physical harm, such as hitting, kicking, pushing, tripping, or damaging personal belongings."
                    }
                  ]
                }
              ]
            },
            "backType": "text",
            "backImage": {
              "altText": "Physical Bullying on a school bus  middle school age",
              "aspectRatio": 1,
              "imageId": "uploads/12f0baef-e861-418e-9d32-f7b8c0ec9b4b/generated-image.jpg",
              "sourceId": "",
              "searchTerm": "Physical Bullying on a school bus  middle school age",
              "sourceType": "Generated",
              "rightsType": "Generated",
              "source": "./assets/images/flashcard-back-a85cafbe-86e1-47bd-ab51-c968f0e08dea-0.png",
              "thumbnail": "https://storage.googleapis.com/mindsmith/uploads%2F12f0baef-e861-418e-9d32-f7b8c0ec9b4b%2Fgenerated-image.jpg"
            },
            "id": "7F8W"
          },
          {
            "front": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Verbal ",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Bullying",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "frontType": "text",
            "frontImage": null,
            "back": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Involves spoken or written words, including name-calling, insults, teasing, threats, or spreading rumors."
                    }
                  ]
                }
              ]
            },
            "backType": "text",
            "backImage": null,
            "id": "60Yt"
          },
          {
            "front": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Social ",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Bullying",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "frontType": "text",
            "frontImage": null,
            "back": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Aims to harm someone's reputation or relationships, often through exclusion, gossip, or social manipulation."
                    }
                  ]
                }
              ]
            },
            "backType": "text",
            "backImage": null,
            "id": "AbGY"
          },
          {
            "front": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Impact of Physical Bullying",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "frontType": "text",
            "frontImage": null,
            "back": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Can cause physical injuries, fear, anxiety, and avoidance of school or specific locations like the bus."
                    }
                  ]
                }
              ]
            },
            "backType": "text",
            "backImage": null,
            "id": "E6Gi"
          },
          {
            "front": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Impact of Verbal Bullying",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "frontType": "text",
            "frontImage": null,
            "back": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Can lead to emotional distress, low self-esteem, depression, anxiety, and academic difficulties."
                    }
                  ]
                }
              ]
            },
            "backType": "text",
            "backImage": null,
            "id": "x-Po"
          },
          {
            "front": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Impact of Social Bullying",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "frontType": "text",
            "frontImage": null,
            "back": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Can result in social isolation, feelings of loneliness, loss of friends, and damage to social standing."
                    }
                  ]
                }
              ]
            },
            "backType": "text",
            "backImage": null,
            "id": "Gup8"
          }
        ],
        "mode": "grid"
      }
    },
    "7T4b": {
      "type": "sceneNode",
      "data": {
        "background": {
          "aspectRatio": 1.7777777777777777,
          "sourceType": "Upload",
          "rightsType": "Uploaded",
          "source": "./assets/images/scene-School.png"
        },
        "name": "School",
        "order": "a0"
      },
      "parentId": "ywn9"
    },
    "dGok": {
      "type": "listTile",
      "data": {
        "items": [
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Sudden Changes in Behavior:",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " A previously outgoing student becoming withdrawn, quiet, or unusually anxious before or during the bus ride."
                    }
                  ]
                }
              ]
            },
            "id": "GmQw"
          },
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Physical Symptoms:",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " Frequent complaints of headaches, stomachaches, or feigned illness, especially on school days or before boarding the bus."
                    }
                  ]
                }
              ]
            },
            "id": "AKqj"
          },
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Isolation or Avoidance:",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " A student consistently sitting alone, avoiding eye contact, or attempting to hide from specific groups of students."
                    }
                  ]
                }
              ]
            },
            "id": "in31"
          },
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Damaged Belongings:",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " Unexplained damage to clothing, books, or personal items."
                    }
                  ]
                }
              ]
            },
            "id": "SDtN"
          },
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Changes in School Attendance:",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " A reluctance or refusal to ride the bus, or increased absenteeism from school."
                    }
                  ]
                }
              ]
            },
            "id": "hJyD"
          },
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Emotional Distress:",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " Appearing sad, irritable, tearful, or showing signs of low self-esteem."
                    }
                  ]
                }
              ]
            },
            "id": "Gilx"
          }
        ],
        "columns": "1",
        "mode": "Bulleted"
      }
    },
    "LFGW": {
      "type": "dialogueNode",
      "data": {
        "scene": {
          "id": "C7rA"
        },
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Last scenario: \"A group of students repeatedly spreads false rumors about a classmate on social media for several weeks.\" Bullying or Not Bullying?"
                }
              ]
            }
          ]
        },
        "characterPose": {
          "type": "uploaded",
          "image": {
            "source": "assets/images/eric-asking.png",
            "altText": "eric asking",
            "rightsType": "Unknown",
            "sourceType": "Unknown",
            "aspectRatio": null
          },
          "layout": "default"
        },
        "options": [
          {
            "next": {
              "type": "node",
              "id": "txYJ"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Not Bullying."
                    }
                  ]
                }
              ]
            },
            "feedback": "Online actions can have serious consequences and fit the definition of bullying. Reconsider.",
            "id": "678x",
            "characterReaction": {
              "characterId": "sophia",
              "emotion": "neutral",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "node",
              "id": "iQoy"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Bullying."
                    }
                  ]
                }
              ]
            },
            "feedback": "You got it! This is a clear case of cyberbullying, involving repetition, intent, and harm.",
            "id": "5QQE",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "happy",
              "type": "preset"
            }
          }
        ],
        "randomizeOptions": true,
        "showMessageHistory": true,
        "showReactionWithoutFeedback": true
      },
      "position": {
        "x": 7600,
        "y": -250
      },
      "parentId": "2127"
    },
    "DNZ2": {
      "type": "dialogueNode",
      "data": {
        "scene": {
          "id": "C7rA"
        },
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Welcome to the \"Is it Bullying?\" activity. Your goal is to identify whether each scenario describes bullying or not. Remember, bullying is typically repeated, intentional, and involves a power imbalance. Drag each card to the correct column, then click submit. Are you ready?"
                }
              ]
            }
          ]
        },
        "characterPose": {
          "type": "uploaded",
          "image": {
            "source": "assets/images/eric-neutral.png",
            "altText": "eric neutral",
            "rightsType": "Unknown",
            "sourceType": "Unknown",
            "aspectRatio": null
          },
          "layout": "default"
        },
        "options": [
          {
            "next": {
              "type": "node",
              "id": "PnpB"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Can you explain the difference between bullying and general conflict again?"
                    }
                  ]
                }
              ]
            },
            "feedback": "It's important to be clear on the definitions. Let's review.",
            "id": "nC0m",
            "characterReaction": {
              "characterId": "sophia",
              "emotion": "neutral",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "node",
              "id": "Qh08"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "I understand, I'm ready to start."
                    }
                  ]
                }
              ]
            },
            "feedback": "Great! Let's dive in.",
            "id": "53Uo",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "happy",
              "type": "preset"
            }
          }
        ],
        "randomizeOptions": true,
        "showMessageHistory": true,
        "showReactionWithoutFeedback": true
      },
      "position": {
        "x": 0,
        "y": -250
      },
      "parentId": "2127"
    },
    "w_Nt": {
      "type": "listTile",
      "data": {
        "items": [
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Anxiety and Fear:",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " Students who are bullied frequently experience heightened levels of anxiety, fear, and stress. This constant state of apprehension can make them dread school, including the bus ride, and can lead to panic attacks or generalized anxiety disorders."
                    }
                  ]
                }
              ]
            },
            "id": "J87_"
          },
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Increased Absenteeism:",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " To avoid their tormentors, bullied students often skip school or refuse to ride the bus. This absenteeism can lead to significant gaps in their education and further social isolation, perpetuating a cycle of disengagement."
                    }
                  ]
                }
              ]
            },
            "id": "7MzW"
          },
          {
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Lower Academic Performance:",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " The emotional distress caused by bullying can severely impair a student's ability to concentrate, participate in class, and complete assignments. This often results in lower grades, decreased academic motivation, and a reduced likelihood of achieving their full educational potential."
                    }
                  ]
                }
              ]
            },
            "id": "8ukG"
          }
        ],
        "columns": "1",
        "mode": "Bulleted"
      }
    },
    "gkmL": {
      "type": "tiledLayout",
      "data": {},
      "layout": {
        "rows": [
          {
            "rowId": "L0bj",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "2pFx",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "ki9w",
            "relativeHeight": 1,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "MSHT",
                "relativeWidth": 0.5
              },
              {
                "tileId": "dSll",
                "relativeWidth": 0.5
              }
            ]
          },
          {
            "rowId": "1Efu",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "RAAu",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "WWgo",
            "relativeHeight": null,
            "relativeWidth": 1.2,
            "tiles": [
              {
                "tileId": "AklN",
                "relativeWidth": 0.5
              },
              {
                "tileId": "hUuJ",
                "relativeWidth": 0.5
              }
            ]
          },
          {
            "rowId": "FA9m",
            "relativeHeight": null,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "H5LB",
                "relativeWidth": 1
              }
            ]
          }
        ]
      },
      "sectionDivider": false
    },
    "H5LB": {
      "type": "questionTile",
      "data": {
        "options": [
          {
            "id": "oKML",
            "text": "Assume the problem is solved and continue the route without further action.",
            "correct": false,
            "feedback": "",
            "image": null
          },
          {
            "id": "7V0z",
            "text": "Privately warn the bullying students that further actions will result in disciplinary action.",
            "correct": false,
            "feedback": "",
            "image": null
          },
          {
            "id": "c9-b",
            "text": "Document the incident thoroughly and report it to school administration for formal follow-up.",
            "correct": true,
            "feedback": "",
            "image": null
          },
          {
            "id": "vJpe",
            "text": "Inform the taunted student that the issue is resolved and to sit elsewhere tomorrow.",
            "correct": false,
            "feedback": "",
            "image": null
          }
        ],
        "feedback": "",
        "feedbackWhenCorrect": "",
        "selectMultiple": false,
        "feedbackMode": "correct / incorrect",
        "finalFeedbackMode": "full",
        "question": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "A bus driver observes a student consistently being excluded and verbally taunted by a group. The driver's immediate intervention de-escalates the situation. According to best practices, what is the "
                },
                {
                  "type": "text",
                  "text": "most crucial next step",
                  "marks": [
                    {
                      "type": "italic"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for the driver?"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "graded": true,
        "contributingToScore": true
      }
    },
    "mSW5": {
      "type": "dialogueNode",
      "data": {
        "scene": {
          "id": "C7rA"
        },
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Consider this: \"Two friends have a minor disagreement over a game, and they resolve it quickly.\" Is this Bullying or Not Bullying?"
                }
              ]
            }
          ]
        },
        "characterPose": {
          "type": "uploaded",
          "image": {
            "source": "assets/images/eric-asking.png",
            "altText": "eric asking",
            "rightsType": "Unknown",
            "sourceType": "Unknown",
            "aspectRatio": null
          },
          "layout": "default"
        },
        "options": [
          {
            "next": {
              "type": "node",
              "id": "LFGW"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Not Bullying."
                    }
                  ]
                }
              ]
            },
            "feedback": "Exactly! This is a normal conflict between peers, not bullying.",
            "id": "Lvsd",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "happy",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "node",
              "id": "OlBs"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Bullying."
                    }
                  ]
                }
              ]
            },
            "feedback": "Think about the nature of the interaction – \"minor disagreement\" and \"resolved quickly.\" Does it fit the bullying criteria?",
            "id": "a7JK",
            "characterReaction": {
              "characterId": "sophia",
              "emotion": "neutral",
              "type": "preset"
            }
          }
        ],
        "randomizeOptions": true,
        "showMessageHistory": true,
        "showReactionWithoutFeedback": true
      },
      "position": {
        "x": 5700,
        "y": 255
      },
      "parentId": "2127"
    },
    "75Un": {
      "type": "sceneNode",
      "data": {
        "background": {
          "aspectRatio": 1.7777777777777777,
          "sourceType": "Upload",
          "rightsType": "Uploaded",
          "source": "./assets/images/scene-School.png"
        },
        "name": "School",
        "order": "a1"
      },
      "parentId": "cQIB"
    },
    "087n": {
      "type": "imageTile",
      "data": {
        "image": {
          "altText": "photorealistic image of a young student looking distressed and isolated on a school bus, staring out the window with a somber expression, in great lighting, one person.",
          "aspectRatio": 1,
          "imageId": "uploads/310c513c-7bd3-46c4-924c-9958c3519fed/generated-image.jpg",
          "searchTerm": "photorealistic image of a young student looking distressed and isolated on a school bus, staring out the window with a somber expression, in great lighting, one person.",
          "sourceType": "Generated",
          "rightsType": "Unknown",
          "layout": "right-full",
          "source": "./assets/images/image-b582e6cf-0066-46ce-a544-eb1008e741a1.png",
          "thumbnail": "https://storage.googleapis.com/mindsmith/uploads%2F310c513c-7bd3-46c4-924c-9958c3519fed%2Fgenerated-image.jpg"
        },
        "objectFit": "cover",
        "status": "Available"
      }
    },
    "Gvoc": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Understanding the Impact and Your Role in Intervention"
                }
              ],
              "attrs": {
                "level": 1
              }
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "-cC1": {
      "type": "processTile",
      "data": {
        "elements": [
          {
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "heading",
                  "content": [
                    {
                      "type": "text",
                      "text": "Recognize"
                    }
                  ],
                  "attrs": {
                    "level": 3
                  }
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "The first pillar involves developing keen observational skills to "
                    },
                    {
                      "type": "text",
                      "text": "identify bullying behaviors and warning signs",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " in their various forms. This includes understanding the nuances of physical, verbal, and social bullying, as well as subtle indicators of distress in students. Early recognition is paramount to preventing escalation and mitigating harm."
                    }
                  ]
                }
              ]
            },
            "media": null,
            "id": "Lzss",
            "justify": null
          },
          {
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "heading",
                  "content": [
                    {
                      "type": "text",
                      "text": "Respond"
                    }
                  ],
                  "attrs": {
                    "level": 3
                  }
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Once bullying is recognized, the next pillar is to "
                    },
                    {
                      "type": "text",
                      "text": "intervene safely and effectively",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " in the moment. This requires calm, decisive action to de-escalate the situation, separate involved parties, and ensure the immediate safety of all students. Appropriate responses are tailored to the severity and type of bullying observed."
                    }
                  ]
                }
              ]
            },
            "media": null,
            "id": "GA3d",
            "justify": null
          },
          {
            "content": {
              "type": "doc",
              "content": [
                {
                  "type": "heading",
                  "content": [
                    {
                      "type": "text",
                      "text": "Report"
                    }
                  ],
                  "attrs": {
                    "level": 3
                  }
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "The final, critical pillar is to "
                    },
                    {
                      "type": "text",
                      "text": "document and report all incidents",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " to the appropriate school administration. This ensures that a formal record is maintained, allowing school officials to conduct thorough investigations, implement disciplinary actions, and provide necessary support services to both victims and aggressors. Consistent reporting reinforces accountability and supports long-term prevention efforts."
                    }
                  ]
                }
              ]
            },
            "media": null,
            "id": "c_9w",
            "justify": null
          }
        ],
        "hasIntro": true,
        "hasOutro": true,
        "intro": {
          "content": {
            "type": "doc",
            "content": [
              {
                "type": "heading",
                "content": [
                  {
                    "type": "text",
                    "text": "The Foundational Pillars of Bullying Management"
                  }
                ],
                "attrs": {
                  "level": 2
                }
              }
            ]
          },
          "media": null,
          "id": "vNCh",
          "justify": null
        },
        "outro": {
          "content": {
            "type": "doc",
            "content": [
              {
                "type": "heading",
                "content": [
                  {
                    "type": "text",
                    "text": "Cultivating a Safe Environment"
                  }
                ],
                "attrs": {
                  "level": 2
                }
              },
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "By diligently applying these three foundational pillars—Recognize, Respond, and Report—school bus drivers become integral to creating a secure, inclusive, and respectful atmosphere on their buses. This systematic approach transforms potential threats into opportunities for positive intervention and sustained student well-being."
                  }
                ]
              }
            ]
          },
          "media": null,
          "id": "H8wM",
          "justify": null
        }
      },
      "elementColor": {
        "alias": "accent-1"
      }
    },
    "9uOx": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Effective bullying management on school buses is not merely about reacting to incidents as they occur; it involves a "
                },
                {
                  "type": "text",
                  "text": "proactive and systematic approach",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to fostering a safe and respectful environment for all students. As a school bus driver, you are a crucial frontline observer and intervenor. Your ability to manage bullying incidents effectively contributes significantly to the overall well-being and academic success of students, ensuring that the bus ride is a secure and positive experience rather than a source of anxiety or fear. This foundational understanding sets the stage for the specific strategies and procedures you will learn in this training."
                }
              ]
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "C7rA": {
      "type": "sceneNode",
      "data": {
        "background": {
          "aspectRatio": 1.7777777777777777,
          "sourceType": "Upload",
          "rightsType": "Uploaded",
          "source": "./assets/images/scene-School.png"
        },
        "name": "School",
        "order": "a1"
      },
      "parentId": "2127"
    },
    "sF7L": {
      "type": "textNode",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "You have successfully intervened in the bullying incident and initiated the proper reporting procedures. Your actions contribute significantly to a safer and more respectful environment for all students on the bus."
                }
              ]
            }
          ]
        },
        "next": {
          "type": "restart"
        },
        "characterPose": {
          "characterId": "alyssa",
          "emotion": "happy",
          "type": "preset"
        },
        "scene": {
          "id": "EfOa"
        }
      },
      "position": {
        "x": 5700,
        "y": 250
      },
      "parentId": "cQIB"
    },
    "I4XQ": {
      "order": "a3",
      "parentId": "u1xs",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "The targeted student often retreats into themselves, trying to become invisible. Their body language, their gaze, their silence –\nall speak volumes about the distress they are experiencing."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "The targeted student often retreats into themselves, trying to become invisible. Their body language, their gaze, their silence –\nall speak volumes about the distress they are experiencing.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fcd159fca-830c-4a18-9129-eb6ffd88891a%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 12513
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": {
            "type": "image",
            "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fe90e8f04-89e6-4885-9fc1-9cbae56142a5%2Fgenerated-image.jpg",
            "opacity": 0.5
          }
        },
        "textColor": "#FFFFFF"
      }
    },
    "SqJf": {
      "type": "flashcardsTile",
      "data": {
        "items": [
          {
            "front": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Initial Sign of Distress",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "frontType": "text",
            "frontImage": null,
            "back": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "A student becoming withdrawn, quiet, or showing physical signs of discomfort like hunched shoulders."
                    }
                  ]
                }
              ]
            },
            "backType": "text",
            "backImage": null,
            "id": "PDc6"
          },
          {
            "front": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Driver's First Action",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "frontType": "text",
            "frontImage": null,
            "back": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Discreetly observe the situation to gather information and identify patterns of behavior."
                    }
                  ]
                }
              ]
            },
            "backType": "text",
            "backImage": null,
            "id": "Mv0f"
          },
          {
            "front": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Effective Intervention Strategy",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "frontType": "text",
            "frontImage": null,
            "back": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Address the entire bus about conduct, then speak privately with involved students and offer support to the victim."
                    }
                  ]
                }
              ]
            },
            "backType": "text",
            "backImage": null,
            "id": "8XCl"
          },
          {
            "front": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Importance of Documentation",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "frontType": "text",
            "frontImage": null,
            "back": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Provides a factual record for school administration to follow up and implement appropriate actions."
                    }
                  ]
                }
              ]
            },
            "backType": "text",
            "backImage": null,
            "id": "0W7M"
          },
          {
            "front": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Outcome for Sarah",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "frontType": "text",
            "frontImage": null,
            "back": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Reduced anxiety, restored confidence, and a renewed sense of safety on the bus."
                    }
                  ]
                }
              ]
            },
            "backType": "text",
            "backImage": null,
            "id": "I0xr"
          },
          {
            "front": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Broader Impact of Intervention",
                      "marks": [
                        {
                          "type": "bold"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "frontType": "text",
            "frontImage": null,
            "back": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Fosters a safer and more respectful environment for all students on the bus."
                    }
                  ]
                }
              ]
            },
            "backType": "text",
            "backImage": null,
            "id": "3H-l"
          }
        ],
        "mode": "grid"
      }
    },
    "7PKv": {
      "type": "tiledLayout",
      "data": {},
      "layout": {
        "rows": [
          {
            "rowId": "fb-5",
            "relativeHeight": 0.3333333333333333,
            "relativeWidth": 1,
            "tiles": [
              {
                "tileId": "wXAM",
                "relativeWidth": 1
              }
            ]
          },
          {
            "rowId": "7eQ6",
            "relativeHeight": 0.75,
            "relativeWidth": 0.7,
            "tiles": [
              {
                "tileId": "tEWm",
                "relativeWidth": 1
              }
            ]
          }
        ]
      },
      "sectionDivider": false
    },
    "npRl": {
      "type": "imageTile",
      "data": {
        "image": {
          "altText": "photorealistic image of a school bus driver looking in the rearview mirror, observing students, with a focused and concerned expression, in great lighting, one person.",
          "aspectRatio": 1,
          "imageId": "uploads/3f9d0350-242e-43f5-9914-5d170101d1ad/generated-image.jpg",
          "searchTerm": "photorealistic image of a school bus driver looking in the rearview mirror, observing students, with a focused and concerned expression, in great lighting, one person.",
          "sourceType": "Generated",
          "rightsType": "Unknown",
          "layout": "right-full",
          "source": "./assets/images/image-c0a5e45a-4417-4bf7-b83f-8557d5c038e7.png",
          "thumbnail": "https://storage.googleapis.com/mindsmith/uploads%2F3f9d0350-242e-43f5-9914-5d170101d1ad%2Fgenerated-image.jpg"
        },
        "objectFit": "cover",
        "status": "Available"
      }
    },
    "3H6a": {
      "order": "a3",
      "parentId": "3ZFB",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "Physical bullying isn't always overt. It can start with 'accidental' bumps or shoves in crowded spaces, often disguised as\nclumsiness."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "Physical bullying isn't always overt. It can start with 'accidental' bumps or shoves in crowded spaces, often disguised as\nclumsiness.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2F75208001-81f3-4222-b7a3-e5f1c7f26c49%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 9718
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": null
        },
        "textColor": "#FFFFFF"
      }
    },
    "PU13": {
      "order": "a0",
      "parentId": "USAC",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Overt Blocking"
                }
              ],
              "attrs": {
                "level": 3
              }
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Preventing seating"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Excluding from games"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "left"
      }
    },
    "979e": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Welcome: "
                }
              ]
            },
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "This training program is designed to equip school bus drivers, both new and experienced, with the essential knowledge and skills to effectively address bullying behaviors on school buses. Maintaining a safe and respectful environment for all students is paramount, and your role as a bus driver is critical in achieving this goal. "
                }
              ]
            },
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "This lesson will cover:"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "An overview of the training program and its objectives"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The critical importance of addressing bullying on school buses"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Your vital role in ensuring a safe and positive environment"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Key training objectives: recognizing bullying, responding safely, and following proper reporting procedures"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "85kL": {
      "type": "tableTile",
      "data": {
        "content": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": ""
                }
              ]
            }
          ]
        },
        "table": {
          "cells": [
            [
              {
                "content": {
                  "type": "doc",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Information Required",
                          "marks": [
                            {
                              "type": "bold"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "content": {
                  "type": "doc",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Description",
                          "marks": [
                            {
                              "type": "bold"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "content": {
                  "type": "doc",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Submission Details",
                          "marks": [
                            {
                              "type": "bold"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            [
              {
                "content": {
                  "type": "doc",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Location of Incident",
                          "marks": [
                            {
                              "type": "bold"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "content": {
                  "type": "doc",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Specific location on the bus (e.g., \"front right,\" \"back row\") or at a bus stop."
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "content": {
                  "type": "doc",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "When:",
                          "marks": [
                            {
                              "type": "bold"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " Within 24-48 hours of the incident."
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            [
              {
                "content": {
                  "type": "doc",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Names of Students Involved",
                          "marks": [
                            {
                              "type": "bold"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "content": {
                  "type": "doc",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Full names of the alleged bully/bullies, victim(s), and any witnesses."
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "content": {
                  "type": "doc",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Expected Response:",
                          "marks": [
                            {
                              "type": "bold"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " Initial contact or acknowledgment within 1-2 school days. Investigation typically concludes within 5-10 school days."
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            [
              {
                "content": {
                  "type": "doc",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Description of Incident",
                          "marks": [
                            {
                              "type": "bold"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "content": {
                  "type": "doc",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Detailed, factual account of what occurred, including specific actions, words, and observed reactions."
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "content": {
                  "type": "doc",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Method:",
                          "marks": [
                            {
                              "type": "bold"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " District-specific online portal, email, or hard copy form."
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            [
              {
                "content": {
                  "type": "doc",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Driver's Actions Taken",
                          "marks": [
                            {
                              "type": "bold"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "content": {
                  "type": "doc",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Outline any immediate interventions, de-escalation techniques, or student re-seating implemented."
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "content": {
                  "type": "doc",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Confidentiality:",
                          "marks": [
                            {
                              "type": "bold"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " Reports are handled with discretion to protect student privacy."
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          ],
          "columnWidths": [
            0.3333333333333333,
            0.3333333333333333,
            0.3333333333333333
          ],
          "hasHeaderRow": true,
          "hasHeaderColumn": false
        }
      }
    },
    "LaTx": {
      "type": "questionTile",
      "data": {
        "options": [
          {
            "id": "OblF",
            "text": "A proactive approach ensures that bus drivers are not solely responsible for managing bullying, shifting the burden to school administration.",
            "correct": false,
            "feedback": "",
            "image": null
          },
          {
            "id": "8hmK",
            "text": "Reactive approaches are sufficient because most bullying incidents are isolated and do not require follow-up.",
            "correct": false,
            "feedback": "",
            "image": null
          },
          {
            "id": "Lbmy",
            "text": "Systematic management is primarily for documentation purposes, offering little direct benefit to student well-being on the bus.",
            "correct": false,
            "feedback": "",
            "image": null
          },
          {
            "id": "Y0Kv",
            "text": "Proactive management helps prevent escalation, fosters a consistent culture of safety, and addresses underlying issues before they become severe.",
            "correct": true,
            "feedback": "",
            "image": null
          }
        ],
        "feedback": "",
        "feedbackWhenCorrect": "",
        "selectMultiple": false,
        "feedbackMode": "correct / incorrect",
        "finalFeedbackMode": "full",
        "question": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Why is a proactive and systematic approach to bullying management considered more effective than merely reacting to incidents as they occur?"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "graded": true,
        "contributingToScore": true
      }
    },
    "6WbD": {
      "order": "a1",
      "parentId": "GzY_",
      "type": "imageElement",
      "data": {
        "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2F96ae3e13-a6d8-4bd8-bb9d-3e949858adf4%2Fgenerated-image.jpg",
        "imageDescription": "A single student sitting alone in a school bus seat, head down, looking out the window with a somber and isolated expression.",
        "objectFit": "cover"
      }
    },
    "lyDK": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Introduction to Bullying Management"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "title"
      }
    },
    "2QCI": {
      "order": "a0",
      "parentId": "bJfR",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "A Safe Ride"
                }
              ],
              "attrs": {
                "level": 1
              }
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "center"
      }
    },
    "k9-8": {
      "order": "a7",
      "parentId": "u1xs",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "The driver's concern grows as the pattern of behavior becomes clearer. It's no longer just a one-off incident, but a repeated\npattern of aggression and distress."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "The driver's concern grows as the pattern of behavior becomes clearer. It's no longer just a one-off incident, but a repeated\npattern of aggression and distress.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2F1a7c6e71-5356-4a51-8246-39ed38a3ceea%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 10710
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": null
        },
        "textColor": "#FFFFFF"
      }
    },
    "ResK": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "The Core Elements of Bullying"
                }
              ],
              "attrs": {
                "level": 3
              }
            },
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Bullying is not merely a conflict or disagreement. It is distinguished by specific elements that differentiate it from other forms of aggressive behavior. Understanding these elements is key to accurate identification and appropriate response."
                }
              ]
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "qZuv": {
      "order": "a0",
      "parentId": "u1xs",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "The school bus ride is a daily routine for many students, a transition between home and school. It's a place where friendships are\nformed, but also where challenges can arise."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "The school bus ride is a daily routine for many students, a transition between home and school. It's a place where friendships are\nformed, but also where challenges can arise.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fd5fc04c7-5cbd-4285-ad6f-1114d1e38c7e%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 10919
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": {
            "type": "image",
            "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2F4f6c09e8-f20e-4277-8b5a-80d6dbb76b76%2Fgenerated-image.jpg",
            "opacity": 0.5
          }
        },
        "textColor": "#FFFFFF"
      }
    },
    "FlRF": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Scenario: Responding to Teasing and Exclusion"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "justify": "center",
        "align": "center",
        "capWidth": null,
        "textAdornment": "title"
      }
    },
    "KK-o": {
      "type": "imageTile",
      "data": {
        "image": {
          "altText": "photorealistic image of a school bus driver observing students in the rearview mirror, with a thoughtful and focused expression, in great lighting, one person.",
          "aspectRatio": 1,
          "imageId": "uploads/83884a71-95e0-46ad-961a-c11018c4fb04/generated-image.jpg",
          "searchTerm": "photorealistic image of a school bus driver observing students in the rearview mirror, with a thoughtful and focused expression, in great lighting, one person.",
          "sourceType": "Generated",
          "rightsType": "Unknown",
          "layout": "left-full",
          "source": "./assets/images/image-d705ec1d-c931-4e70-a7a7-a134a73ba34a.png",
          "thumbnail": "https://storage.googleapis.com/mindsmith/uploads%2F83884a71-95e0-46ad-961a-c11018c4fb04%2Fgenerated-image.jpg"
        },
        "objectFit": "cover",
        "status": "Available"
      }
    },
    "TPF9": {
      "type": "buttonsTile",
      "data": {
        "items": [
          {
            "id": "yciB",
            "label": "Begin",
            "destination": {
              "type": "url",
              "value": "next"
            },
            "style": "primary"
          }
        ],
        "justify": "left",
        "align": "start",
        "size": "medium",
        "fullWidth": false
      }
    },
    "OlBs": {
      "type": "dialogueNode",
      "data": {
        "scene": {
          "id": "C7rA"
        },
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "You marked \"Two friends have a minor disagreement over a game, and they resolve it quickly\" as 'Bullying'. What makes you think it's bullying rather than a normal conflict?"
                }
              ]
            }
          ]
        },
        "characterPose": {
          "type": "uploaded",
          "image": {
            "source": "assets/images/eric-thinking.png",
            "altText": "eric thinking",
            "rightsType": "Unknown",
            "sourceType": "Unknown",
            "aspectRatio": null
          },
          "layout": "default"
        },
        "options": [
          {
            "next": {
              "type": "node",
              "id": "LFGW"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "It's 'Not Bullying' because it's a conflict, not targeted, repeated harm."
                    }
                  ]
                }
              ]
            },
            "feedback": "Precisely. Healthy relationships involve occasional disagreements.",
            "id": "lV5k",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "neutral",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "node",
              "id": "mSW5"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Any disagreement can escalate into bullying."
                    }
                  ]
                }
              ]
            },
            "feedback": "While true that conflicts can escalate, this scenario specifically states it was minor and resolved quickly. Let's try this one again.",
            "id": "FbQk",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "disappointed",
              "type": "preset"
            }
          }
        ],
        "randomizeOptions": true,
        "showMessageHistory": true,
        "showReactionWithoutFeedback": true
      },
      "position": {
        "x": 6650,
        "y": -250
      },
      "parentId": "2127"
    },
    "AklN": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Effective Intervention: Do's and Don'ts"
                }
              ],
              "attrs": {
                "level": 3
              }
            },
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "To effectively address bullying, it is crucial to follow established best practices while avoiding actions that could escalate the situation or undermine your authority. Adhering to these guidelines ensures a safe and constructive response."
                }
              ]
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "-WTO": {
      "type": "sceneNode",
      "data": {
        "background": {
          "aspectRatio": 1,
          "sourceType": "Upload",
          "rightsType": "Uploaded",
          "source": "./assets/images/scene-Scene 4.png"
        },
        "name": "Scene 4",
        "order": "a3"
      },
      "parentId": "cQIB"
    },
    "hE50": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Bullying is defined as "
                },
                {
                  "type": "text",
                  "text": "unwanted, aggressive behavior",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " among school-aged children that involves a real or perceived "
                },
                {
                  "type": "text",
                  "text": "power imbalance",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ". The behavior is repeated, or has the potential to be repeated, over time. It is crucial for school bus drivers to recognize these characteristics to intervene effectively and maintain a safe environment for all students."
                }
              ]
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "FdFf": {
      "order": "a0",
      "parentId": "IXMy",
      "type": "imageElement",
      "data": {
        "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2F95e982ec-87fc-4fe4-9b2f-76b08fa692f5%2Fgenerated-image.jpg",
        "imageDescription": "A close-up of a pen writing on an incident report form.",
        "objectFit": "cover"
      }
    },
    "A72s": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Knowledge Check: Warning Signs of Bullying"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "title"
      }
    },
    "tEWm": {
      "type": "imageTile",
      "data": {
        "image": {
          "altText": "Managing Bullying on the school bus: Pre-Test ",
          "aspectRatio": 1,
          "imageId": "uploads/c1379bfd-b05c-444f-a06e-7f6ba8944794/generated-image.jpg",
          "sourceId": "",
          "searchTerm": "Managing Bullying on the school bus: Pre-Test ",
          "sourceType": "Generated",
          "rightsType": "Generated",
          "source": "./assets/images/image-e353b948-f65d-4734-99a4-204979bf90a6.png",
          "thumbnail": "https://storage.googleapis.com/mindsmith/uploads%2Fc1379bfd-b05c-444f-a06e-7f6ba8944794%2Fgenerated-image.jpg"
        },
        "objectFit": "cover"
      }
    },
    "-SHa": {
      "order": "a0",
      "parentId": "wrec",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Verbal Taunts"
                }
              ],
              "attrs": {
                "level": 3
              }
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Name-calling"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Spreading rumors"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "left"
      }
    },
    "1CAF": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Responding to Bullying: Strategies for Intervention"
                }
              ],
              "attrs": {
                "level": 1
              }
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "3AYV": {
      "type": "textNode",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Failing to report, even after intervention, can lead to unaddressed patterns of behavior and miss opportunities for school-wide prevention."
                }
              ]
            }
          ]
        },
        "next": {
          "type": "node",
          "id": "sF7L"
        },
        "characterPose": {
          "characterId": "sophia",
          "emotion": "disappointed",
          "type": "preset"
        },
        "scene": {
          "id": "uSAq"
        }
      },
      "position": {
        "x": 4750,
        "y": -250
      },
      "parentId": "cQIB"
    },
    "Wcmp": {
      "order": "a1",
      "parentId": "3ZFB",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "Teasing often begins with seemingly harmless remarks. One student might make fun of another's clothes or backpack, often in a\nhushed tone, but designed to make them feel uncomfortable."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "Teasing often begins with seemingly harmless remarks. One student might make fun of another's clothes or backpack, often in a\nhushed tone, but designed to make them feel uncomfortable.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2F7bee9e62-d432-4179-bd46-d64f8d7da316%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 11912
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": null
        },
        "textColor": "#FFFFFF"
      }
    },
    "TzfK": {
      "type": "sceneNode",
      "data": {
        "background": {
          "aspectRatio": 1,
          "sourceType": "Upload",
          "rightsType": "Uploaded",
          "source": "./assets/images/scene-Scene 5.png"
        },
        "name": "Scene 5",
        "order": "a4"
      },
      "parentId": "cQIB"
    },
    "GzY_": {
      "order": "a8",
      "parentId": "3ZFB",
      "type": "videoScene",
      "data": {
        "transcript": [
          {
            "text": [
              {
                "type": "text",
                "text": "The cumulative effect of these behaviors can be devastating, leading to anxiety, fear, and a reluctance to even ride the bus.\nStudents may appear sad, withdrawn, or show physical symptoms of distress."
              }
            ],
            "characterId": "Georgia_sitting_office_front",
            "voiceId": null
          }
        ],
        "audios": [
          {
            "text": "The cumulative effect of these behaviors can be devastating, leading to anxiety, fear, and a reluctance to even ride the bus.\nStudents may appear sad, withdrawn, or show physical symptoms of distress.",
            "audioUrl": "https://storage.googleapis.com/mindsmith/uploads%2F261bc6c9-1edf-45b1-af93-b47cc540d79b%2Fnarration.mp3",
            "voiceName": "XrExE9yKIg1WjnnlVkGX",
            "lengthMs": 13714
          }
        ],
        "background": {
          "baseColor": "#000000",
          "overlay": null
        },
        "textColor": "#FFFFFF"
      }
    },
    "ggmX": {
      "type": "dialogueNode",
      "data": {
        "scene": {
          "id": "C7rA"
        },
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Next scenario: \"A student is intentionally excluded daily from lunch by a group of peers.\" Is this Bullying or Not Bullying?"
                }
              ]
            }
          ]
        },
        "characterPose": {
          "type": "uploaded",
          "image": {
            "source": "assets/images/eric-asking.png",
            "altText": "eric asking",
            "rightsType": "Unknown",
            "sourceType": "Unknown",
            "aspectRatio": null
          },
          "layout": "default"
        },
        "options": [
          {
            "next": {
              "type": "node",
              "id": "MeJw"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Not Bullying."
                    }
                  ]
                }
              ]
            },
            "feedback": "Exclusion can be a powerful form of harm. Reconsider the elements of repetition and intent.",
            "id": "m5rb",
            "characterReaction": {
              "characterId": "sophia",
              "emotion": "neutral",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "node",
              "id": "mSW5"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Bullying."
                    }
                  ]
                }
              ]
            },
            "feedback": "Absolutely correct! This involves repetition, intent to harm, and a clear power dynamic.",
            "id": "oMIm",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "happy",
              "type": "preset"
            }
          }
        ],
        "randomizeOptions": true,
        "showMessageHistory": true,
        "showReactionWithoutFeedback": true
      },
      "position": {
        "x": 3800,
        "y": -250
      },
      "parentId": "2127"
    },
    "0kE2": {
      "type": "imageTile",
      "data": {
        "image": {
          "altText": "yellow school bus loading students",
          "aspectRatio": 1.78,
          "imageId": "uploads/75e2ad0b-307c-4d08-a6ea-40a164f4abbd/generated-image.jpg",
          "sourceId": "",
          "searchTerm": "yellow school bus loading students",
          "sourceType": "Generated",
          "rightsType": "Generated",
          "source": "./assets/images/image-ebb5fbd6-e2e0-4a96-b981-601c7adae821.png",
          "thumbnail": "https://storage.googleapis.com/mindsmith/uploads%2F75e2ad0b-307c-4d08-a6ea-40a164f4abbd%2Fgenerated-image.jpg"
        },
        "objectFit": "cover",
        "status": "Available"
      }
    },
    "w0VJ": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Distinguishing between bullying and other forms of conflict or accidental interactions is a critical skill for school bus drivers. This activity will help you apply the definitions and characteristics of bullying discussed previously to various real-world scenarios. Remember, bullying involves "
                },
                {
                  "type": "text",
                  "text": "unwanted, aggressive behavior",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", a "
                },
                {
                  "type": "text",
                  "text": "power imbalance",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "repetition",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " or the "
                },
                {
                  "type": "text",
                  "text": "potential for repetition",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " over time."
                }
              ]
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "1i4b": {
      "type": "imageTile",
      "data": {
        "image": {
          "altText": "photorealistic image of a school bus driver meticulously filling out a report form on a clipboard, with a focused and serious expression, in great lighting, one person.",
          "aspectRatio": 1,
          "imageId": "uploads/74416c80-8ef3-4759-b411-08ea9a4892ce/generated-image.jpg",
          "searchTerm": "photorealistic image of a school bus driver meticulously filling out a report form on a clipboard, with a focused and serious expression, in great lighting, one person.",
          "sourceType": "Generated",
          "rightsType": "Unknown",
          "layout": "right-full",
          "source": "./assets/images/image-ec936e11-ad1e-4cc4-9457-3885cc28aaea.png",
          "thumbnail": "https://storage.googleapis.com/mindsmith/uploads%2F74416c80-8ef3-4759-b411-08ea9a4892ce%2Fgenerated-image.jpg"
        },
        "objectFit": "cover",
        "status": "Available"
      }
    },
    "9UIY": {
      "order": "a1",
      "parentId": "Wcmp",
      "type": "imageElement",
      "data": {
        "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2F1b5cf9ca-ffd9-4b3a-8842-9db51f011435%2Fgenerated-image.jpg",
        "imageDescription": "Two students sitting together on a bus, one student subtly pointing and smirking at another student's backpack while the other looks down.",
        "objectFit": "cover"
      }
    },
    "2pFx": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Policies and Responsibilities in Bullying Prevention"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "title"
      }
    },
    "_h8a": {
      "type": "matchingTile",
      "data": {
        "title": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "items": [
          {
            "choice": "",
            "match": "",
            "id": "x6nc"
          },
          {
            "choice": "",
            "match": "",
            "id": "hUPt"
          },
          {
            "choice": "",
            "match": "",
            "id": "8RQy"
          },
          {
            "choice": "",
            "match": "",
            "id": "lk6i"
          }
        ],
        "contributingToScore": true
      }
    },
    "9Nzj": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Following the intervention in Sarah's case, Mr. Harrison's actions extended beyond the immediate situation on the bus. His thorough documentation and formal report to the school administration were crucial steps that ensured Sarah received continued support and that the bullying behavior was addressed comprehensively. This real-world example underscores the "
                },
                {
                  "type": "text",
                  "text": "critical importance of following proper reporting procedures",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for all bullying incidents. Timely and accurate reporting is not merely a bureaucratic step; it is a vital component in safeguarding student well-being and upholding the integrity of school safety policies. It provides the necessary information for school officials to investigate, implement disciplinary actions, and offer support to both victims and, where appropriate, perpetrators."
                }
              ]
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "none"
      }
    },
    "iQoy": {
      "type": "dialogueNode",
      "data": {
        "scene": {
          "id": "C7rA"
        },
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "You've done well identifying these scenarios. What's one key takeaway you've learned about distinguishing bullying from other conflicts?"
                }
              ]
            }
          ]
        },
        "characterPose": {
          "type": "uploaded",
          "image": {
            "source": "assets/images/eric-thinking.png",
            "altText": "eric thinking",
            "rightsType": "Unknown",
            "sourceType": "Unknown",
            "aspectRatio": null
          },
          "layout": "default"
        },
        "options": [
          {
            "next": {
              "type": "node",
              "id": "RaSJ"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Bullying involves repeated, intentional harm, often with a power imbalance."
                    }
                  ]
                }
              ]
            },
            "feedback": "Excellent summary! Those are indeed the core elements to look for.",
            "id": "Vxg1",
            "characterReaction": {
              "characterId": "eric",
              "emotion": "happy",
              "type": "preset"
            }
          },
          {
            "next": {
              "type": "node",
              "id": "FPM_"
            },
            "text": {
              "type": "doc",
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "It's mostly about how mean someone is being."
                    }
                  ]
                }
              ]
            },
            "feedback": "While meanness is involved, the definition is more specific. Think about the other factors we discussed.",
            "id": "ARt2",
            "characterReaction": {
              "characterId": "sophia",
              "emotion": "neutral",
              "type": "preset"
            }
          }
        ],
        "randomizeOptions": true,
        "showMessageHistory": true,
        "showReactionWithoutFeedback": true
      },
      "position": {
        "x": 9500,
        "y": 250
      },
      "parentId": "2127"
    },
    "uSAq": {
      "type": "sceneNode",
      "data": {
        "background": {
          "aspectRatio": 1,
          "sourceType": "Upload",
          "rightsType": "Uploaded",
          "source": "./assets/images/scene-Scene 8.png"
        },
        "name": "Scene 8",
        "order": "a7"
      },
      "parentId": "cQIB"
    },
    "l6Vp": {
      "type": "textTile",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Scenario: Responding to Teasing and Exclusion"
                }
              ],
              "attrs": {
                "level": 2
              }
            }
          ]
        },
        "justify": "left",
        "align": "center",
        "capWidth": null,
        "textAdornment": "title"
      }
    },
    "UAbN": {
      "order": "a1",
      "parentId": "ZWWq",
      "type": "imageElement",
      "data": {
        "imageUrl": "https://storage.googleapis.com/mindsmith/uploads%2Fdebfb36d-8b40-436b-bf07-beb5e5521de2%2Fgenerated-image.jpg",
        "imageDescription": "A wide shot of the interior of a school bus, showing several students seated, some engaged in conversation, others looking out the window.",
        "objectFit": "cover"
      }
    },
    "LhBe": {
      "order": "a0",
      "parentId": "zk6J",
      "type": "textElement",
      "data": {
        "text": {
          "type": "doc",
          "content": [
            {
              "type": "heading",
              "content": [
                {
                  "type": "text",
                  "text": "Physical Harassment"
                }
              ],
              "attrs": {
                "level": 1
              }
            }
          ]
        },
        "textColor": "#FFFFFF",
        "textAlignment": "center"
      }
    }
  },
  "blockOrder": [
    "D9Kn",
    "7PKv",
    "6ydp",
    "QMR3",
    "KkNJ",
    "ZCoQ",
    "5SZQ",
    "1T_1",
    "-r_i",
    "FEEQ",
    "gkmL",
    "54Rx",
    "Xm_I"
  ],
  "narrationMap": null,
  "settings": {
    "logo": null,
    "logoStyle": "white-background",
    "exitButton": true,
    "viewingMode": "horizontal",
    "hideTitlePage": true,
    "reportingMode": "pass/incomplete",
    "scoredContent": "all",
    "displayRestart": true,
    "logoAspectRatio": null,
    "scoredSectionId": null,
    "assessmentRetries": 0,
    "courseDisplayMode": "list",
    "narrationAutoplay": true,
    "navigationFreedom": "restricted",
    "passingPercentage": 80,
    "completionCriteria": "assessmentAndView",
    "entranceAnimations": true,
    "includeCertificate": false,
    "previewDescription": null,
    "requireInteractives": true,
    "learnerEntranceSurvey": true,
    "completionPresentation": "dialog",
    "showPoweredByMindsmith": false,
    "enhancedScormIntegration": true,
    "learnerEntranceSurveyEmail": true
  },
  "backgroundInfo": "",
  "language": "EN",
  "projectId": null,
  "theme": {
    "id": "wUPz",
    "name": "",
    "public": false,
    "draft": true,
    "draftFromThemeId": null,
    "organizationId": "cmfsyhn96006ujr04sa053r2g",
    "userId": null,
    "pageColor": "#bab8b1",
    "headerFont": {
      "url": "https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=block",
      "name": "Lora",
      "type": "google"
    },
    "bodyFont": {
      "url": "https://fonts.googleapis.com/css2?family=Noto%20Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=block",
      "name": "Noto Sans",
      "type": "google"
    },
    "imageUrl": null,
    "publicOrder": 0,
    "contentOverlay": null,
    "titleOverlay": null,
    "headerWeight": 500,
    "headerColor": "#0a0a3f",
    "bodyWeight": 400,
    "bodyColor": "#272727",
    "autoColor": false,
    "accentColor": "#444444",
    "secondaryAccentColor": "#00598a"
  },
  "id": "cmfsyl8by0195kv045mpbab2k",
  "themeId": "wUPz",
  "version": "2.0.0-generated",
  "organizationId": "cmfsyhn96006ujr04sa053r2g",
  "thumbnailUrl": "https://storage.googleapis.com/mindsmith/thumbnails/522002cc-b594-4405-bd1e-3e3698aac29d.png",
  "thumbnailLastUpdated": {},
  "thumbnailContentHash": "b890030a3fa12d618e1021eaaf0c9f6b392c29a2124b82ae0708b86592b0752b",
  "userUploadedThumbnailUrl": null,
  "courseId": null,
  "courseTitle": null,
  "storyboardItems": {
    "-r_i": {
      "type": "realWorldApplication",
      "context": "",
      "additions": [],
      "pageLength": "md",
      "documentText": "",
      "instructions": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "text": "Real-World Example: The Case of Sarah",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Story of a student named Sarah who experienced bullying on the bus",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Details of Sarah's anxiety and fear of riding the bus",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "text": "Driver's Intervention",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "How the bus driver noticed Sarah's distress",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Steps taken by the driver to intervene and support Sarah",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Positive outcomes of the intervention for Sarah",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "documentInstances": []
    },
    "5SZQ": {
      "type": null,
      "context": "",
      "additions": [],
      "pageLength": "md",
      "documentText": "",
      "instructions": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "text": "Interactive Activity: Is it Bullying?",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Instructions for the drag-and-drop activity",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "text": "Bullying Scenarios",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Scenario 1: A student teases another student once",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Scenario 2: A student is excluded daily from a group",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Scenario 3: Physical altercation between students",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "text": "Not Bullying Scenarios",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Scenario 1: Accidental bump in the aisle",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Scenario 2: A single instance of disagreement",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "documentInstances": []
    },
    "ZCoQ": {
      "type": "divider",
      "context": "",
      "additions": [],
      "documentText": "",
      "instructions": "Understanding Bullying",
      "documentInstances": []
    },
    "1T_1": {
      "type": null,
      "context": "",
      "additions": [],
      "pageLength": "md",
      "documentText": "",
      "instructions": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "text": "Impact of Bullying on Students",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Statistics on bullying prevalence",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Example: \"1 in 5 students report being bullied\"",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "text": "Effects of Bullying",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Anxiety and fear among students",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Increased absenteeism from school",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Lower academic performance and grades",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "documentInstances": []
    },
    "D9Kn": {
      "type": "introduction",
      "context": "",
      "additions": [],
      "pageLength": "md",
      "documentText": "",
      "instructions": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "text": "Welcome and Introduction",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Overview of the training program",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Importance of addressing bullying on school buses",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Role of bus drivers in ensuring a safe environment",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Training objectives: recognizing, responding, and reporting",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "documentInstances": []
    },
    "KkNJ": {
      "type": "scenario",
      "context": "",
      "additions": [],
      "pageLength": "md",
      "documentText": "",
      "instructions": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "text": "Scenario: A Student Being Teased",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "A student is being teased repeatedly by a group of students.",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "The teasing escalates to name-calling and exclusion.",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "text": "Driver's Response",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Driver notices the teasing and assesses the situation.",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Driver intervenes calmly, asking the group to stop.",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Driver reports the incident to school authorities.",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "documentInstances": []
    },
    "Xm_I": {
      "type": null,
      "context": "",
      "additions": [],
      "pageLength": "md",
      "documentText": "",
      "instructions": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "text": "Knowledge Check: Warning Signs of Bullying",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Review of the key warning signs of bullying",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "text": "Multiple-Choice Question",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Question: Which of the following is a warning sign of bullying?",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Options: Student frequently sits alone, Student laughs with friends, Student seems relaxed, Student enjoys bus rides",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "text": "Feedback",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Immediate feedback on the correct answer and explanation",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "documentInstances": []
    },
    "qEcQ": {
      "type": null,
      "blockId": "xjKR",
      "additions": [],
      "pageLength": "md",
      "documentText": "",
      "instructions": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "text": "Activity: Is it Bullying?",
                "type": "text",
                "marks": [
                  {
                    "type": "textStyle",
                    "attrs": {
                      "color": "rgb(0, 0, 0)"
                    }
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "text": "~3 min (part of above)",
                "type": "text",
                "marks": [
                  {
                    "type": "textStyle",
                    "attrs": {
                      "color": "rgb(0, 0, 0)"
                    }
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "text": "Instructions: ",
                "type": "text",
                "marks": [
                  {
                    "type": "textStyle",
                    "attrs": {
                      "color": "rgb(0, 0, 0)"
                    }
                  }
                ]
              },
              {
                "text": "Drag each scenario into the correct category: Bullying or Not Bullying.",
                "type": "text",
                "marks": [
                  {
                    "type": "textStyle",
                    "attrs": {
                      "color": "rgb(0, 0, 0)"
                    }
                  },
                  {
                    "type": "italic"
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "text": "Example scenarios appear as cards (e.g., “A student teases once,” “A student is excluded daily”).",
                "type": "text",
                "marks": [
                  {
                    "type": "textStyle",
                    "attrs": {
                      "color": "rgb(0, 0, 0)"
                    }
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "text": "Interactive drag-and-drop activity screen with cards.",
                "type": "text",
                "marks": [
                  {
                    "type": "textStyle",
                    "attrs": {
                      "color": "rgb(0, 0, 0)"
                    }
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "text": "Submit button → Feedback appears",
                "type": "text",
                "marks": [
                  {
                    "type": "textStyle",
                    "attrs": {
                      "color": "rgb(0, 0, 0)"
                    }
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "text": "Next/Back arrows",
                "type": "text",
                "marks": [
                  {
                    "type": "textStyle",
                    "attrs": {
                      "color": "rgb(0, 0, 0)"
                    }
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "text": "Audio prompt: “Review these scenarios and decide: is it bullying? Drag each card to the correct column. Then click \"Submit.”",
                "type": "text",
                "marks": [
                  {
                    "type": "textStyle",
                    "attrs": {
                      "color": "rgb(0, 0, 0)"
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      "generationType": "sources",
      "documentInstances": []
    },
    "54Rx": {
      "type": "realWorldApplication",
      "context": "",
      "additions": [],
      "pageLength": "md",
      "documentText": "",
      "instructions": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "text": "Real-World Application: Reporting Procedures",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Importance of following proper reporting procedures",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Step-by-step guide on how to report bullying incidents",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "text": "Example Reporting Form",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Explanation of the information required in the report",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Who to submit the report to and expected response time",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "documentInstances": []
    },
    "FEEQ": {
      "type": "divider",
      "context": "",
      "additions": [],
      "documentText": "",
      "instructions": "Impact and Responsibilities",
      "documentInstances": []
    },
    "6ydp": {
      "type": null,
      "context": "",
      "additions": [],
      "pageLength": "md",
      "documentText": "",
      "instructions": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "text": "Definition of Bullying",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Explanation of bullying as unwanted, aggressive behavior",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Emphasis on the power imbalance involved in bullying",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "text": "Types of Bullying",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Physical bullying: examples and impact",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Verbal bullying: examples and impact",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Relational bullying: examples and impact",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Visual examples of each type of bullying",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "documentInstances": []
    },
    "gkmL": {
      "type": null,
      "context": "",
      "additions": [],
      "pageLength": "md",
      "documentText": "",
      "instructions": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "text": "Policies and Responsibilities",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Explanation of the bus driver's role in addressing bullying",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Legal and ethical responsibilities of bus drivers",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "text": "Do's and Don'ts",
                "type": "text"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Do: Intervene calmly and safely",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Do: Report all incidents of bullying",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Don't: Ignore or dismiss complaints",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "text": "Don't: Confront students aggressively",
                        "type": "text"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "documentInstances": []
    },
    "sP_D": {
      "type": null,
      "context": "",
      "additions": [],
      "documentText": "",
      "instructions": "Introduction to Bullying Management",
      "documentInstances": []
    }
  },
  "storyboardOrder": [
    "D9Kn",
    "sP_D",
    "6ydp",
    "KkNJ",
    "ZCoQ",
    "5SZQ",
    "1T_1",
    "-r_i",
    "FEEQ",
    "gkmL",
    "54Rx",
    "Xm_I",
    "qEcQ"
  ],
  "storyboardOptions": {
    "model": "gemini-2.5-flash",
    "title": "Managing Bullying on the School Bus",
    "length": -1,
    "version": "1.0.0",
    "language": "EN",
    "provider": "gemini",
    "cancelled": true,
    "imageType": "Generated",
    "imageModel": "gemini:imagen-4.0-generate-preview-06-06",
    "imageStyle": "- The image should be photo realistic so say \"photorealistic\" at the beginning of every prompt.\n  - Do not create images that are abstract concepts or things that that have text in them. \n  - No things that would have reflections or lots of people, specify the number of people.\n  - Be sure to mention the image has be to be in great lighting, lots of light.",
    "pageLength": "md",
    "description": "",
    "tilesOptions": [
      "text",
      "list",
      "image",
      "question",
      "accordion",
      "flashcards",
      "matching",
      "sorting",
      "tabs",
      "timeline",
      "separator",
      "shortanswer",
      "process",
      "table",
      "quote",
      "chart",
      "note",
      "scenario",
      "embed"
    ],
    "interactivity": 5,
    "generationType": "sources",
    "imagesFromDocs": true,
    "canAddCitations": false,
    "includeThinking": false,
    "includePageTypes": [
      "scenario",
      "introduction",
      "core-content",
      "realWorldApplication",
      "assessment"
    ],
    "documentInstances": [],
    "extractedStyleGuide": "In this training, you will learn how to recognize bullying behaviors, respond safely in the moment, and follow reporting procedures to prevent future incidents.",
    "includeCourseContext": false,
    "additionalInstructions": {
      "Tone": "formal ",
      "Learner": "School bus drivers new and experienced",
      "Outline": null,
      "Objectives": "Identify common signs of bullying behavior on the school bus.\nDistinguish between different types of bullying (verbal, physical & social).\nApply appropriate intervention strategies based on different bullying scenarios.",
      "WritingStyle": null
    },
    "isCurrentDesignVersion": false,
    "isSequentialGeneration": true
  },
  "contentType": "LESSON",
  "snapshotInfo": null,
  "rootType": null
}";